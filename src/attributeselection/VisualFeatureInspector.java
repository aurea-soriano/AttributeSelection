/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package attributeselection;

import classifications4.S4Classification;
import classifier.J48DecisionTreeClassifier;
import classifier.MultilayerPerceptronClassifier;
import classifier.SupportVectorMachineClassifier;
import decisiontree.DecisionTree;
import matrix.distancematrix.DistanceMatrix;
import ffs.FFS;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import matrix.matrixcontroller.MatrixOperator;
import matrix.pointsmatrix.DenseMatrix;
import matrix.pointsmatrix.DenseVector;
import matrix.pointsmatrix.MatrixFactory;
import matrix.pointsmatrix.TxtMatrix;
import util.DATAFilter;
import util.DMATFilter;
import util.FloatComparator;
import util.MatrixFilter;
import util.OpenDialog;
import util.SaveDialog;
import util.WhiteCustomTableCellRenderer;
import util.CustomTableCellRenderer;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import measures.Measure;
import matrix.pointsmatrix.AbstractMatrix;
import util.Chronometer;
import util.ExtensionFileFilter;
import util.HistogramChart;
import util.ListMeasuresCustomTableCellRenderer;
import util.ListMeasuresWhiteCustomTableCellRenderer;
import util.MatrixMeasuresCustomTableCellRenderer;
import util.MatrixMeasuresWhiteCustomTableCellRenderer;
import util.PNGFilter;
import util.Pair;
import util.StandarizationColumns;
import util.StringComparator;
import util.TimeSeriesChart;
import static util.Utils.getVectorDataByAttribute;
import static util.Utils.getVectorDataByAttributeByTimeVal;
import static util.Utils.isFloat;
import static util.Utils.isInteger;
import weka.gui.treevisualizer.PlaceNode1;
import weka.gui.treevisualizer.TreeVisualizer;

/**
 *
 * @author aurea
 */
public class VisualFeatureInspector extends javax.swing.JFrame implements PropertyChangeListener {

    private BufferedImage histogramImage;
    private BufferedImage timeSeriesImage;
    private BufferedImage timeSeriesClassImage;
    private static int splitCounter = 0;
    private static int joinCounter = 0;
    private final int INDEX_COLUMN = 0;
    private final int ID_COLUMN = 1;
    private final int CLASS_COLUMN = 2;
    private int selectedMeasureCol = -1;
    private int selectedMeasureRow = -1;
    private DistanceMatrix distanceMatrix;
    static private AbstractMatrix pointsMatrix;
    //private AbstractMatrix filteredPointsMatrix;
    private ArrayList<String> attributes;
    private ArrayList<String> selectedAttributes;
    private String typeMatrix;
    List<String> listColors;
    String[] strColors;
    List<String> listOrientation;
    String[] strOrientation;
    List<Float> listClusters;
    String selectedColor;
    String selectedOrientation;
    private int selectedIndexTab;
    private String nameDatabase;
    private TreeVisualizer treeVisualizer;
    private boolean pcDcpcBoolean = false;
    private float[][] DCPC;
    List listSelectedValues;
    int ffsKInteger;
    TaskLabelData taskLabelData;
    static String s4ClassificationStr;
    static int s4Attribute;
    int numberThreads = 1;

    /**
     * Creates new form AttributeSelection
     */
    public VisualFeatureInspector() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTabbedPane = new javax.swing.JTabbedPane();
        selectAttributesMenuItem = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        matrixScrollPane = new javax.swing.JScrollPane();
        matrixTable = new javax.swing.JTable();
        labelDataPanel = new javax.swing.JPanel();
        labelLeftPanel = new javax.swing.JPanel();
        labelDataProgressBar = new javax.swing.JProgressBar();
        listAttributesLabelDataComboBox = new javax.swing.JComboBox();
        listClassificationsLabelDataComboBox = new javax.swing.JComboBox();
        selectS4AttributeLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labelDataButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        descriptionS4LabelDataTextArea = new javax.swing.JTextArea();
        attrToNormPanel = new javax.swing.JPanel();
        attrToNormLabel = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        attrToNormList = new javax.swing.JList();
        normalizeButton = new javax.swing.JButton();
        downloadNormalizeButton = new javax.swing.JButton();
        measuresPanel = new javax.swing.JPanel();
        measuresAttributesComboBox = new javax.swing.JComboBox();
        refreshMatrixButton = new javax.swing.JButton();
        selectedMeasureCol= -1;
        selectedMeasureRow= -1;
        measuresCellMenu = new javax.swing.JMenu();
        measuresCellMenu.setText("Delete");

        measuresCellColMenuItem = new javax.swing.JMenuItem();
        measuresCellColMenuItem.setText("Column");
        measuresCellColMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                measuresCellColMenuItemActionPerformed(evt);
            }
        });

        measuresCellRowMenuItem = new javax.swing.JMenuItem();
        measuresCellRowMenuItem.setText("Row");
        measuresCellRowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                measuresCellRowMenuItemActionPerformed(evt);
            }
        });

        measuresCellMenu.add(measuresCellRowMenuItem);
        measuresCellMenu.add(measuresCellColMenuItem);
        measuresCellPopupMenu = new javax.swing.JPopupMenu();
        measuresCellPopupMenu.add(measuresCellMenu);

        /*
        measuresRowMenuItem = new javax.swing.JMenuItem();
        measuresRowMenuItem.setText("Delete row");
        measuresRowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                measuresRowMenuItemActionPerformed(evt);
            }
        });

        measuresRowPopupMenu = new javax.swing.JPopupMenu();
        measuresRowPopupMenu.add(measuresRowMenuItem);

        measuresColMenuItem = new javax.swing.JMenuItem();
        measuresColMenuItem.setText("Delete col");
        measuresColMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                measuresColMenuItemActionPerformed(evt);
            }
        });

        measuresColPopupMenu = new javax.swing.JPopupMenu();
        measuresColPopupMenu.add(measuresColMenuItem);
        */
        measuresListMenuItem = new javax.swing.JMenuItem();
        measuresListMenuItem.setText("Delete attribute");
        measuresListMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                measuresListMenuItemActionPerformed(evt);
            }
        });

        measuresListPopupMenu = new javax.swing.JPopupMenu();
        measuresListPopupMenu.add(measuresListMenuItem);
        measuresScrollPane = new javax.swing.JScrollPane();
        measuresTable = new javax.swing.JTable(){
            @Override
            public boolean isCellSelected(int row, int column) {
                return isColumnSelected(column) || isRowSelected(row);
            }

            @Override
            public void changeSelection(int rowIndex, int columnIndex, boolean toggle, boolean extend) {
                super.changeSelection(rowIndex, columnIndex, false, false);
                repaint(getVisibleRect());
            }
        };
        jPanel4 = new javax.swing.JPanel();
        orderLabel = new java.awt.Label();
        measureComboBox = new javax.swing.JComboBox();
        rankAttributeButton = new javax.swing.JButton();
        blockLabel = new javax.swing.JLabel();
        blocksTextField = new javax.swing.JTextField();
        drawHistogramButton = new javax.swing.JButton();
        listMeasuresScrollPane = new javax.swing.JScrollPane();
        listMeasuresTable = new javax.swing.JTable();
        measuresPanel3 = new javax.swing.JPanel();
        histogramImageLabel = new javax.swing.JLabel();
        histogramLabel = new javax.swing.JLabel();
        decisionTreePanel = new javax.swing.JPanel();
        decisionTreeVisualizerPanel = new javax.swing.JPanel();
        dataMiningPanel = new javax.swing.JPanel();
        dataMiningPanel1 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        classifierComboBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultClassifierTextArea = new javax.swing.JTextArea();
        classifierLabel = new javax.swing.JLabel();
        classifyButton1 = new javax.swing.JButton();
        classifyButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        usedAttrJ48Label = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        usedAttrJ48List = new javax.swing.JList();
        usedAttrJ48Button = new javax.swing.JButton();
        filterUsedAttributesJ48Button = new javax.swing.JButton();
        timeSeriesPanel = new javax.swing.JPanel();
        drawTimeSeriesButton = new javax.swing.JButton();
        timeSeriesLabel = new javax.swing.JLabel();
        atributoToVisualizateLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        attributesTimeSeriesJList = new javax.swing.JList();
        timeSeriesClassLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        timeOfWeekLabel = new javax.swing.JLabel();
        weekNumberLabel = new javax.swing.JLabel();
        weekNumberAttributeTimeSeriesComboBox = new javax.swing.JComboBox();
        gpsTimeLabel = new javax.swing.JLabel();
        timeOfWeekComboBox = new javax.swing.JComboBox();
        timeValTimeSeriesLabel = new javax.swing.JLabel();
        timeValTimeSeriesComboBox = new javax.swing.JComboBox();
        fssMtsPanel = new javax.swing.JPanel();
        ffsMethodLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        selectFSSFeaturesButton = new javax.swing.JButton();
        fieldsFFSNorthPanel = new javax.swing.JPanel();
        idTimeFFSLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        idTimeFFSComboBox = new javax.swing.JComboBox();
        ffsKTextField = new javax.swing.JTextField();
        ffsThresholdTextField = new javax.swing.JTextField();
        fssKLabel = new javax.swing.JLabel();
        fssKThresholdLabel = new javax.swing.JLabel();
        ffsCenterPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ffsResultVariablesList = new javax.swing.JList();
        buttonsFFSPanel = new javax.swing.JPanel();
        cleverRankButton = new javax.swing.JButton();
        cleverHybridButton = new javax.swing.JButton();
        cleverClusterButton = new javax.swing.JButton();
        pcaRankingButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        pcDcpcCovarianceButton = new javax.swing.JButton();
        pcDcpcCorrelationButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        ffsOriginalVariablesList = new javax.swing.JList();
        graphProPanel = new javax.swing.JPanel();
        createGraphProButton = new javax.swing.JButton();
        graphProScrollPane = new javax.swing.JScrollPane();
        MenuButtonPanel = new javax.swing.JPanel();
        joinButton = new javax.swing.JButton();
        paintButton = new javax.swing.JButton();
        removeColButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        splitButton = new javax.swing.JButton();
        removeRowNANButton = new javax.swing.JButton();
        removeRowButton = new javax.swing.JButton();
        infoDataSetButton = new javax.swing.JButton();
        selectedIndexTab =0;
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        colorOptionsMenuItem = new javax.swing.JMenuItem();
        clearCacheMenuItem = new javax.swing.JMenuItem();
        setThreadsMenuItem = new javax.swing.JMenuItem();
        exportMenu = new javax.swing.JMenu();
        PrintScreenMenuItem = new javax.swing.JMenuItem();
        exportDataMenuItem = new javax.swing.JMenuItem();
        exportInvertedMatrixMenu = new javax.swing.JMenuItem();
        exportWekaFormatMenu = new javax.swing.JMenuItem();
        exportImageDecisionTreeMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Visual Feature Selection (VFS)");
        setResizable(false);

        mainTabbedPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainTabbedPane.setPreferredSize(new java.awt.Dimension(1822, 1000));
        mainTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainTabbedPaneStateChanged(evt);
            }
        });

        matrixScrollPane.setAutoscrolls(true);
        listColors = new ArrayList<>();
        listColors.add("None");
        listColors.add("BTC");
        listColors.add("BTY");
        listColors.add("CategoryScale");
        listColors.add("GTW");
        listColors.add("Gray");
        listColors.add("HeatedObject");
        listColors.add("LOCS");
        listColors.add("LinGray");
        listColors.add("Magenta");
        listColors.add("OCS");
        listColors.add("PseudoRainbow");
        listColors.add("Rainbow");

        listOrientation = new ArrayList<>();
        listOrientation.add("None");
        listOrientation.add("Vertical");
        listOrientation.add("Horizontal");
        listOrientation.add("By Cluster");

        selectedColor="None";
        selectedOrientation ="None";

        matrixTable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        matrixTable.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
        matrixTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        matrixScrollPane.setViewportView(matrixTable);

        selectAttributesMenuItem.setText("Select attributes...");
        selectAttributesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAttributesMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(selectAttributesMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Visual Feature Selection (VFS)");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        matrixTable.setAutoCreateRowSorter(true);
        //DefaultTableModel tableModel = new DefaultTableModel(
            //        new Object[][]{},
            //        new String[]{});

        TableModel tableModel = new DefaultTableModel(new Object[][]{}, new String[]{});
        TableCellRenderer renderer = new WhiteCustomTableCellRenderer();
        for (int i = 0; i < this.matrixTable.getColumnCount(); i++) {
            this.matrixTable.setDefaultRenderer(this.matrixTable.getColumnClass(i), renderer);
        }

        matrixTable.setModel(tableModel);
        TableRowSorter rowSorter = new TableRowSorter(matrixTable.getModel());
        for (int i = 0; i < this.matrixTable.getColumnCount(); i++) {
            rowSorter.setComparator(i, new FloatComparator());

        }
        matrixTable.setRowSorter(rowSorter);
        matrixTable.setCellSelectionEnabled(true);
        matrixTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        matrixTable.setComponentPopupMenu(jPopupMenu1);
        matrixScrollPane.setViewportView(matrixTable);

        mainTabbedPane.addTab("Home", new javax.swing.ImageIcon(getClass().getResource("/icons/tabs/folder_home15.png")), matrixScrollPane, "Matrix Editor"); // NOI18N

        listAttributesLabelDataComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select S4 attribute" }));

        listClassificationsLabelDataComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select S4 classification", "Hegarty2001", "Tiwari2011", "ITUR2013", "OscarClassification", "OscarClassification2" }));
        listClassificationsLabelDataComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listClassificationsLabelDataComboBoxActionPerformed(evt);
            }
        });

        selectS4AttributeLabel.setText("Select S4 attribute:");

        jLabel3.setText("Classification:");

        labelDataButton.setText("Label Data");
        labelDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelDataButtonActionPerformed(evt);
            }
        });

        descriptionS4LabelDataTextArea.setEditable(false);
        descriptionS4LabelDataTextArea.setColumns(20);
        descriptionS4LabelDataTextArea.setRows(5);
        jScrollPane5.setViewportView(descriptionS4LabelDataTextArea);

        javax.swing.GroupLayout labelLeftPanelLayout = new javax.swing.GroupLayout(labelLeftPanel);
        labelLeftPanel.setLayout(labelLeftPanelLayout);
        labelLeftPanelLayout.setHorizontalGroup(
            labelLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(labelLeftPanelLayout.createSequentialGroup()
                .addGroup(labelLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(labelLeftPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(labelLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5)
                            .addGroup(labelLeftPanelLayout.createSequentialGroup()
                                .addGroup(labelLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(selectS4AttributeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(labelLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(listAttributesLabelDataComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(listClassificationsLabelDataComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(labelDataProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(labelLeftPanelLayout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(labelDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        labelLeftPanelLayout.setVerticalGroup(
            labelLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(labelLeftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(labelLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectS4AttributeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listAttributesLabelDataComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 36, Short.MAX_VALUE)
                .addGroup(labelLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(listClassificationsLabelDataComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelDataButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(labelDataProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        attrToNormLabel.setText("Attributes to normalize: ");

        attrToNormList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane6.setViewportView(attrToNormList);

        normalizeButton.setText("Normalize(SCOL)");
        normalizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeButtonActionPerformed(evt);
            }
        });

        downloadNormalizeButton.setText("Download Normalize(SCOL)");
        downloadNormalizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadNormalizeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout attrToNormPanelLayout = new javax.swing.GroupLayout(attrToNormPanel);
        attrToNormPanel.setLayout(attrToNormPanelLayout);
        attrToNormPanelLayout.setHorizontalGroup(
            attrToNormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attrToNormPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(attrToNormLabel)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, attrToNormPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(normalizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
            .addGroup(attrToNormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, attrToNormPanelLayout.createSequentialGroup()
                    .addContainerGap(212, Short.MAX_VALUE)
                    .addComponent(downloadNormalizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(76, 76, 76)))
        );
        attrToNormPanelLayout.setVerticalGroup(
            attrToNormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attrToNormPanelLayout.createSequentialGroup()
                .addGroup(attrToNormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(attrToNormPanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(attrToNormLabel))
                    .addGroup(attrToNormPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 174, Short.MAX_VALUE)
                .addComponent(normalizeButton)
                .addGap(110, 110, 110))
            .addGroup(attrToNormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, attrToNormPanelLayout.createSequentialGroup()
                    .addContainerGap(265, Short.MAX_VALUE)
                    .addComponent(downloadNormalizeButton)
                    .addGap(162, 162, 162)))
        );

        javax.swing.GroupLayout labelDataPanelLayout = new javax.swing.GroupLayout(labelDataPanel);
        labelDataPanel.setLayout(labelDataPanelLayout);
        labelDataPanelLayout.setHorizontalGroup(
            labelDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(labelDataPanelLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(labelLeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79)
                .addComponent(attrToNormPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );
        labelDataPanelLayout.setVerticalGroup(
            labelDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, labelDataPanelLayout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addGroup(labelDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelLeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attrToNormPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );

        mainTabbedPane.addTab("Label Data", labelDataPanel);

        measuresAttributesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Inicial", "Covariance", "Kendall", "Pearson", "Spearman" }));
        measuresAttributesComboBox.setActionCommand("");

        refreshMatrixButton.setText("Refresh Matrix");
        refreshMatrixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshMatrixButtonActionPerformed(evt);
            }
        });

        measuresScrollPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        measuresScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        measuresScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        measuresTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        measuresScrollPane.setViewportView(measuresTable);

        orderLabel.setText("Order by:");

        measureComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Inicial", "Amplitude", "AverageAbsoluteDeviation", "Covariance", "Mean", "StandardDeviation", "Skewness", "Variance" }));

        rankAttributeButton.setText("Rank Attributes");
        rankAttributeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankAttributeButtonActionPerformed(evt);
            }
        });

        blockLabel.setText("Blocks(Hist.):");

        blocksTextField.setText("10");

        drawHistogramButton.setText("Draw Histogram");
        drawHistogramButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawHistogramButtonActionPerformed(evt);
            }
        });

        listMeasuresTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Attribute", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listMeasuresScrollPane.setViewportView(listMeasuresTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(orderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(rankAttributeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(measureComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(blockLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(drawHistogramButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(blocksTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(listMeasuresScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(measureComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rankAttributeButton)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(blockLabel)
                            .addComponent(blocksTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(drawHistogramButton))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(listMeasuresScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        histogramImageLabel.setText("Histogram of Selected Attribute:");

        histogramImageMenuItem = new javax.swing.JMenuItem();
        histogramImageMenuItem.setText("Save image");
        histogramImageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histogramImageMenuItemActionPerformed(evt);
            }
        });

        histogramImagePopupMenu = new javax.swing.JPopupMenu();
        histogramImagePopupMenu.add(histogramImageMenuItem);

        javax.swing.GroupLayout measuresPanel3Layout = new javax.swing.GroupLayout(measuresPanel3);
        measuresPanel3.setLayout(measuresPanel3Layout);
        measuresPanel3Layout.setHorizontalGroup(
            measuresPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(measuresPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(histogramImageLabel)
                .addContainerGap(156, Short.MAX_VALUE))
            .addGroup(measuresPanel3Layout.createSequentialGroup()
                .addComponent(histogramLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        measuresPanel3Layout.setVerticalGroup(
            measuresPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(measuresPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(histogramImageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(histogramLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout measuresPanelLayout = new javax.swing.GroupLayout(measuresPanel);
        measuresPanel.setLayout(measuresPanelLayout);
        measuresPanelLayout.setHorizontalGroup(
            measuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(measuresPanelLayout.createSequentialGroup()
                .addGroup(measuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(measuresPanelLayout.createSequentialGroup()
                        .addGap(233, 233, 233)
                        .addComponent(measuresAttributesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(refreshMatrixButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(measuresPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(measuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(measuresScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1117, Short.MAX_VALUE)
                            .addGroup(measuresPanelLayout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(measuresPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        measuresPanelLayout.setVerticalGroup(
            measuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(measuresPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(measuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(measuresAttributesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshMatrixButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(measuresScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(measuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(measuresPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Measures", measuresPanel);

        decisionTreePanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout decisionTreeVisualizerPanelLayout = new javax.swing.GroupLayout(decisionTreeVisualizerPanel);
        decisionTreeVisualizerPanel.setLayout(decisionTreeVisualizerPanelLayout);
        decisionTreeVisualizerPanelLayout.setHorizontalGroup(
            decisionTreeVisualizerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1149, Short.MAX_VALUE)
        );
        decisionTreeVisualizerPanelLayout.setVerticalGroup(
            decisionTreeVisualizerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 567, Short.MAX_VALUE)
        );

        decisionTreePanel.add(decisionTreeVisualizerPanel, java.awt.BorderLayout.CENTER);

        mainTabbedPane.addTab("Decision Tree", decisionTreePanel);

        dataMiningPanel.setRequestFocusEnabled(false);

        jLabel1.setText("Result:");

        classifierComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Classifier", "J48 - Decision Tree", "Multilayer Perceptron", "Support Vector Machine" }));
        classifierComboBox.addActionListener(new java.awt.event.ActionListener()  {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanResultClassifierTextArea(evt);
            }
        });

        resultClassifierTextArea.setEditable(false);
        resultClassifierTextArea.setColumns(20);
        resultClassifierTextArea.setRows(5);
        jScrollPane2.setViewportView(resultClassifierTextArea);

        classifierLabel.setText("Classifier:");

        classifyButton1.setText("Classify  with threads");
        classifyButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classifyButton1ActionPerformed(evt);
            }
        });

        classifyButton.setText("Classify - 1");
        classifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classifyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(classifierLabel)
                        .addGap(31, 31, 31)
                        .addComponent(classifierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(classifyButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classifierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classifierLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classifyButton)
                    .addComponent(classifyButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout dataMiningPanel1Layout = new javax.swing.GroupLayout(dataMiningPanel1);
        dataMiningPanel1.setLayout(dataMiningPanel1Layout);
        dataMiningPanel1Layout.setHorizontalGroup(
            dataMiningPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dataMiningPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        dataMiningPanel1Layout.setVerticalGroup(
            dataMiningPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataMiningPanel1Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 16, Short.MAX_VALUE))
        );

        usedAttrJ48Label.setText("Attributes of J48: ");

        jScrollPane7.setViewportView(usedAttrJ48List);

        usedAttrJ48Button.setText("Get attributes of J48");
        usedAttrJ48Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usedAttrJ48ButtonActionPerformed(evt);
            }
        });

        filterUsedAttributesJ48Button.setText("Select these attributes");
        filterUsedAttributesJ48Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterUsedAttributesJ48ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(usedAttrJ48Label, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(105, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(usedAttrJ48Button, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(filterUsedAttributesJ48Button, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(usedAttrJ48Button)
                .addGap(3, 3, 3)
                .addComponent(usedAttrJ48Label, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filterUsedAttributesJ48Button)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout dataMiningPanelLayout = new javax.swing.GroupLayout(dataMiningPanel);
        dataMiningPanel.setLayout(dataMiningPanelLayout);
        dataMiningPanelLayout.setHorizontalGroup(
            dataMiningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataMiningPanelLayout.createSequentialGroup()
                .addComponent(dataMiningPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );
        dataMiningPanelLayout.setVerticalGroup(
            dataMiningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dataMiningPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(dataMiningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataMiningPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        mainTabbedPane.addTab("Classifiers", dataMiningPanel);

        drawTimeSeriesButton.setText("Draw Time Series");
        drawTimeSeriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawTimeSeriesButtonActionPerformed(evt);
            }
        });

        timeSeriesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeSeriesMenuItem = new javax.swing.JMenuItem();
        timeSeriesMenuItem.setText("Save image");
        timeSeriesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeSeriesMenuItemActionPerformed(evt);
            }
        });

        timeSeriesPopMenu = new javax.swing.JPopupMenu();
        timeSeriesPopMenu.add(timeSeriesMenuItem);

        atributoToVisualizateLabel.setText("Attribute to visualizate:");

        attributesTimeSeriesJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Select Attributes to visualizate" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        attributesTimeSeriesJList.setInheritsPopupMenu(true);
        jScrollPane1.setViewportView(attributesTimeSeriesJList);

        timeSeriesClassLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeSeriesClassMenuItem = new javax.swing.JMenuItem();
        timeSeriesClassMenuItem.setText("Save image");
        timeSeriesClassMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeSeriesClassMenuItemActionPerformed(evt);
            }
        });

        timeSeriesClassPopMenu = new javax.swing.JPopupMenu();
        timeSeriesClassPopMenu.add(timeSeriesMenuItem);

        timeOfWeekLabel.setText("Time of week:");

        weekNumberLabel.setText("Week number:");

        weekNumberAttributeTimeSeriesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select week number" }));

        gpsTimeLabel.setText("GPS time");

        timeOfWeekComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select time of week" }));

        timeValTimeSeriesLabel.setText("Time_val:");

        timeValTimeSeriesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select all time" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(gpsTimeLabel)
                        .addGap(18, 18, 18)
                        .addComponent(timeOfWeekLabel))
                    .addComponent(weekNumberLabel)
                    .addComponent(timeValTimeSeriesLabel))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 20, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(weekNumberAttributeTimeSeriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timeOfWeekComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(timeValTimeSeriesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(weekNumberLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gpsTimeLabel)
                            .addComponent(timeOfWeekLabel)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(weekNumberAttributeTimeSeriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timeOfWeekComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeValTimeSeriesLabel)
                    .addComponent(timeValTimeSeriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout timeSeriesPanelLayout = new javax.swing.GroupLayout(timeSeriesPanel);
        timeSeriesPanel.setLayout(timeSeriesPanelLayout);
        timeSeriesPanelLayout.setHorizontalGroup(
            timeSeriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timeSeriesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(59, 59, 59)
                .addComponent(atributoToVisualizateLabel)
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(drawTimeSeriesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(126, Short.MAX_VALUE))
            .addGroup(timeSeriesPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(timeSeriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(timeSeriesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 1085, Short.MAX_VALUE)
                    .addComponent(timeSeriesClassLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        timeSeriesPanelLayout.setVerticalGroup(
            timeSeriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timeSeriesPanelLayout.createSequentialGroup()
                .addGroup(timeSeriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(timeSeriesPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(atributoToVisualizateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE))
                    .addGroup(timeSeriesPanelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(drawTimeSeriesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(timeSeriesPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(timeSeriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(timeSeriesClassLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(timeSeriesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mainTabbedPane.addTab("Time Series", timeSeriesPanel);

        selectFSSFeaturesButton.setText("Select these attributes");
        selectFSSFeaturesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFSSFeaturesButtonActionPerformed(evt);
            }
        });

        idTimeFFSLabel.setText("Id Time:");

        jLabel2.setText(" Feature Subset Selection and Feature Ranking for Multivariate Time Series (Hyunkin Yoon, 2005)");

        ffsKTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ffsKTextFieldKeyPressed(evt);
            }
        });

        ffsThresholdTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ffsThresholdTextFieldKeyPressed(evt);
            }
        });

        fssKLabel.setText("Maximum number of attributes k:");

        fssKThresholdLabel.setText("Threshold &:");

        javax.swing.GroupLayout fieldsFFSNorthPanelLayout = new javax.swing.GroupLayout(fieldsFFSNorthPanel);
        fieldsFFSNorthPanel.setLayout(fieldsFFSNorthPanelLayout);
        fieldsFFSNorthPanelLayout.setHorizontalGroup(
            fieldsFFSNorthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fieldsFFSNorthPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fieldsFFSNorthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(fieldsFFSNorthPanelLayout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addGroup(fieldsFFSNorthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fssKThresholdLabel)
                            .addComponent(fssKLabel)
                            .addComponent(idTimeFFSLabel))
                        .addGap(18, 18, 18)
                        .addGroup(fieldsFFSNorthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ffsThresholdTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ffsKTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(idTimeFFSComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 151, Short.MAX_VALUE))))
                .addContainerGap())
        );
        fieldsFFSNorthPanelLayout.setVerticalGroup(
            fieldsFFSNorthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fieldsFFSNorthPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsFFSNorthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fssKThresholdLabel)
                    .addComponent(ffsThresholdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsFFSNorthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ffsKTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fssKLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(fieldsFFSNorthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(idTimeFFSLabel)
                    .addComponent(idTimeFFSComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jScrollPane3.setViewportView(ffsResultVariablesList);

        buttonsFFSPanel.setLayout(null);

        cleverRankButton.setText("CLever-Rank");
        cleverRankButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleverRankButtonActionPerformed(evt);
            }
        });
        buttonsFFSPanel.add(cleverRankButton);
        cleverRankButton.setBounds(10, 150, 190, 31);

        cleverHybridButton.setText("CLever-Hybrid");
        cleverHybridButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleverHybridButtonActionPerformed(evt);
            }
        });
        buttonsFFSPanel.add(cleverHybridButton);
        cleverHybridButton.setBounds(10, 230, 190, 31);

        cleverClusterButton.setText("CLever-Cluster");
        cleverClusterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleverClusterButtonActionPerformed(evt);
            }
        });
        buttonsFFSPanel.add(cleverClusterButton);
        cleverClusterButton.setBounds(10, 190, 190, 31);

        pcaRankingButton.setText("PCA Ranking");
        pcaRankingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcaRankingButtonActionPerformed(evt);
            }
        });
        buttonsFFSPanel.add(pcaRankingButton);
        pcaRankingButton.setBounds(10, 300, 190, 31);
        buttonsFFSPanel.add(jSeparator1);
        jSeparator1.setBounds(12, 308, 45, 10);

        pcDcpcCovarianceButton.setText("PC and DCPC (Cov)");
        pcDcpcCovarianceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcDcpcCovarianceButtonActionPerformed(evt);
            }
        });
        buttonsFFSPanel.add(pcDcpcCovarianceButton);
        pcDcpcCovarianceButton.setBounds(10, 60, 190, 31);

        pcDcpcCorrelationButton.setText("PC and DCPC (Corr)");
        pcDcpcCorrelationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcDcpcCorrelationButtonActionPerformed(evt);
            }
        });
        buttonsFFSPanel.add(pcDcpcCorrelationButton);
        pcDcpcCorrelationButton.setBounds(10, 10, 190, 31);

        ffsOriginalVariablesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ffsOriginalVariablesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ffsOriginalVariablesListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(ffsOriginalVariablesList);

        javax.swing.GroupLayout ffsCenterPanelLayout = new javax.swing.GroupLayout(ffsCenterPanel);
        ffsCenterPanel.setLayout(ffsCenterPanelLayout);
        ffsCenterPanelLayout.setHorizontalGroup(
            ffsCenterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ffsCenterPanelLayout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(buttonsFFSPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );
        ffsCenterPanelLayout.setVerticalGroup(
            ffsCenterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ffsCenterPanelLayout.createSequentialGroup()
                .addGroup(ffsCenterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ffsCenterPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(ffsCenterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ffsCenterPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(buttonsFFSPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout fssMtsPanelLayout = new javax.swing.GroupLayout(fssMtsPanel);
        fssMtsPanel.setLayout(fssMtsPanelLayout);
        fssMtsPanelLayout.setHorizontalGroup(
            fssMtsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fssMtsPanelLayout.createSequentialGroup()
                .addGroup(fssMtsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fssMtsPanelLayout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(fieldsFFSNorthPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(fssMtsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(fssMtsPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ffsMethodLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(fssMtsPanelLayout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addComponent(selectFSSFeaturesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fssMtsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ffsCenterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(524, 524, 524))
        );
        fssMtsPanelLayout.setVerticalGroup(
            fssMtsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fssMtsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(fssMtsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldsFFSNorthPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fssMtsPanelLayout.createSequentialGroup()
                        .addComponent(selectFSSFeaturesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ffsMethodLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)))
                .addGroup(fssMtsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fssMtsPanelLayout.createSequentialGroup()
                        .addGap(390, 390, 390)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ffsCenterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        mainTabbedPane.addTab("FSS-MTS", fssMtsPanel);

        createGraphProButton.setText("create Graph");
        createGraphProButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createGraphProButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout graphProPanelLayout = new javax.swing.GroupLayout(graphProPanel);
        graphProPanel.setLayout(graphProPanelLayout);
        graphProPanelLayout.setHorizontalGroup(
            graphProPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphProPanelLayout.createSequentialGroup()
                .addGap(420, 420, 420)
                .addComponent(createGraphProButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(606, Short.MAX_VALUE))
            .addGroup(graphProPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(graphProScrollPane)
                .addContainerGap())
        );
        graphProPanelLayout.setVerticalGroup(
            graphProPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphProPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(createGraphProButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(graphProScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainTabbedPane.addTab("GraphPro", graphProPanel);

        joinButton.setEnabled(true);
        joinButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/actions/add30.png"))); // NOI18N
        joinButton.setToolTipText("Join data");
        joinButton.setPreferredSize(new java.awt.Dimension(30, 30));
        joinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinButtonActionPerformed(evt);
            }
        });

        paintButton.setEnabled(true);
        paintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/actions/colorset30.png"))); // NOI18N
        paintButton.setToolTipText("Paint Matrix Home");
        paintButton.setPreferredSize(new java.awt.Dimension(30, 30));
        paintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paintButtonActionPerformed(evt);
            }
        });

        removeRowButton.setEnabled(true);
        removeColButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/actions/colremove30.png"))); // NOI18N
        removeColButton.setToolTipText("Remove Col");
        removeColButton.setPreferredSize(new java.awt.Dimension(30, 30));
        removeColButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeColButtonActionPerformed(evt);
            }
        });

        openButton.setEnabled(true);
        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/actions/gtk-open30.png"))); // NOI18N
        openButton.setToolTipText("Open File");
        openButton.setMaximumSize(new java.awt.Dimension(140, 140));
        openButton.setPreferredSize(new java.awt.Dimension(30, 30));
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        saveButton.setEnabled(true);
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/actions/gtk-save30.png"))); // NOI18N
        saveButton.setToolTipText("Save data");
        saveButton.setPreferredSize(new java.awt.Dimension(30, 30));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        splitButton.setEnabled(true);
        splitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/actions/editcut30.png"))); // NOI18N
        splitButton.setToolTipText("Split data");
        splitButton.setPreferredSize(new java.awt.Dimension(30, 30));
        splitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitButtonActionPerformed(evt);
            }
        });

        removeRowNANButton.setEnabled(true);
        removeRowNANButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/actions/nanremove30.png"))); // NOI18N
        removeRowNANButton.setToolTipText("Remove Row with NAN");
        removeRowNANButton.setPreferredSize(new java.awt.Dimension(30, 30));
        removeRowNANButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowNANButtonActionPerformed(evt);
            }
        });

        removeRowButton.setEnabled(true);
        removeRowButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/actions/rowremove30.png"))); // NOI18N
        removeRowButton.setToolTipText("Remove Row");
        removeRowButton.setPreferredSize(new java.awt.Dimension(30, 30));
        removeRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowButtonActionPerformed(evt);
            }
        });

        infoDataSetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/actions/info30.png"))); // NOI18N
        infoDataSetButton.setMaximumSize(new java.awt.Dimension(30, 30));
        infoDataSetButton.setMinimumSize(new java.awt.Dimension(30, 30));
        infoDataSetButton.setPreferredSize(new java.awt.Dimension(30, 30));
        infoDataSetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoDataSetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MenuButtonPanelLayout = new javax.swing.GroupLayout(MenuButtonPanel);
        MenuButtonPanel.setLayout(MenuButtonPanelLayout);
        MenuButtonPanelLayout.setHorizontalGroup(
            MenuButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuButtonPanelLayout.createSequentialGroup()
                .addComponent(openButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(splitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(joinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paintButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeColButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(removeRowNANButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeRowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoDataSetButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(256, Short.MAX_VALUE))
        );
        MenuButtonPanelLayout.setVerticalGroup(
            MenuButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuButtonPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(MenuButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(removeRowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(splitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(joinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paintButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeColButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeRowNANButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infoDataSetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(73, 73, 73))
        );

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        closeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        closeMenuItem.setText("Close");
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        colorOptionsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK));
        colorOptionsMenuItem.setText("Color Options");
        colorOptionsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorOptionsMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(colorOptionsMenuItem);

        clearCacheMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK));
        clearCacheMenuItem.setText("Clear cache");
        clearCacheMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCacheMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(clearCacheMenuItem);

        setThreadsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.SHIFT_MASK));
        setThreadsMenuItem.setText("Set # Threads");
        setThreadsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setThreadsMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(setThreadsMenuItem);

        menuBar.add(editMenu);

        exportMenu.setText("Export");

        PrintScreenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        PrintScreenMenuItem.setText("Print Screen");
        PrintScreenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintScreenMenuItemActionPerformed(evt);
            }
        });
        exportMenu.add(PrintScreenMenuItem);

        exportDataMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exportDataMenuItem.setText("Export Data");
        exportDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportDataMenuItemActionPerformed(evt);
            }
        });
        exportMenu.add(exportDataMenuItem);

        exportInvertedMatrixMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        exportInvertedMatrixMenu.setText("Export Inverted Matrix");
        exportInvertedMatrixMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportInvertedMatrixMenuActionPerformed(evt);
            }
        });
        exportMenu.add(exportInvertedMatrixMenu);

        exportWekaFormatMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        exportWekaFormatMenu.setText("Export WEKA format");
        exportWekaFormatMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportWekaFormatMenuActionPerformed(evt);
            }
        });
        exportMenu.add(exportWekaFormatMenu);

        exportImageDecisionTreeMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        exportImageDecisionTreeMenu.setText("Export Image of Decision Tree");
        exportImageDecisionTreeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportImageDecisionTreeMenuActionPerformed(evt);
            }
        });
        exportMenu.add(exportImageDecisionTreeMenu);

        menuBar.add(exportMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(mainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MenuButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MenuButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(mainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private DenseMatrix createPointsMatrixFromView() {

        DenseMatrix denseMatrix = new DenseMatrix();
        int elementCount = this.matrixTable.getRowCount();
        for (int i = 0; i < elementCount; i++) {
            float elementClass = Float.valueOf(this.matrixTable.getValueAt(i, CLASS_COLUMN).toString());

            String elementId = String.valueOf(this.matrixTable.getValueAt(i, ID_COLUMN));
            float vectorValues[] = new float[this.matrixTable.getColumnCount() - 3];

            for (int j = 0; j < this.matrixTable.getColumnCount() - 3; j++) {
                vectorValues[j] = Float.valueOf(this.matrixTable.getValueAt(i, j + 3).toString());
                //vectorValues[j] = (Float) ((AbstractVector) modelData.get(i)).get(j + 3);

            }
            denseMatrix.addRow(new DenseVector(vectorValues, elementId, elementClass));
        }
        ArrayList<String> listNames = new ArrayList<>();
        for (int i = 3; i < this.matrixTable.getColumnCount(); i++) {
            listNames.add(this.matrixTable.getColumnName(i));
        }
        denseMatrix.setAttributes(listNames);
        return denseMatrix;

    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        this.setLocationRelativeTo(null);
    }
    private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_closeMenuItemActionPerformed

    public int[] getSelectedRowsModelIndices() {
        if (this.matrixTable == null) {
            throw new NullPointerException("table == null");
        }

        int[] selectedRowIndices = this.matrixTable.getSelectedRows();
        int countSelected = selectedRowIndices.length;

        for (int i = 0; i < countSelected; i++) {
            selectedRowIndices[i] = this.matrixTable.convertRowIndexToModel(selectedRowIndices[i]);
        }

        return selectedRowIndices;
    }


    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        int result = OpenDialog.showOpenDialog(new MatrixFilter(), this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String filename = OpenDialog.getFilename();
            this.nameDatabase = filename.substring(0, filename.indexOf("."));
            if (this.nameDatabase.contains("/")) {
                this.nameDatabase = this.nameDatabase.substring(this.nameDatabase.lastIndexOf("/") + 1);
            }
            if (filename.endsWith("data")) {
                typeMatrix = "data";

                try {
                    this.distanceMatrix = null;
                    this.joinButton.setEnabled(true);
                    this.matrixTable.setComponentPopupMenu(jPopupMenu1);

                    AbstractMatrix inputPointsMatrix = MatrixFactory.getInstance(filename);
                    this.selectedAttributes = null;
                    refreshTableData(inputPointsMatrix);
                    this.setTitle("MatrixManager - " + filename);
                    VisualFeatureInspector.pointsMatrix = inputPointsMatrix;

                } catch (IOException ex) {
                    Logger.getLogger(VisualFeatureInspector.class
                            .getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(
                            null, "Error opening file!");
                }
            } else {
                if (filename.endsWith("dmat")) {
                    typeMatrix = "dmat";

                    try {
                        DistanceMatrix distMatrix = new DistanceMatrix(filename);
                        this.distanceMatrix = distMatrix;
                        VisualFeatureInspector.pointsMatrix = null;
                        this.joinButton.setEnabled(false);
                        this.matrixTable.setComponentPopupMenu(null);
                        refreshTableData(distMatrix);
                        this.setTitle("MatrixManager - " + filename);

                    } catch (IOException ex) {
                        Logger.getLogger(VisualFeatureInspector.class
                                .getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(
                                null, "Error opening file!");
                    }
                } else {
                    if (filename.endsWith("txt")) {
                        typeMatrix = "txt";

                        try {
                            this.distanceMatrix = null;
                            this.joinButton.setEnabled(true);
                            this.matrixTable.setComponentPopupMenu(jPopupMenu1);
                            AbstractMatrix inputPointsMatrix = MatrixFactory.getTxtInstance(filename);
                            this.selectedAttributes = null;
                            refreshTableData(inputPointsMatrix);
                            this.setTitle("MatrixManager - " + filename);
                            VisualFeatureInspector.pointsMatrix = inputPointsMatrix;

                        } catch (IOException ex) {
                            Logger.getLogger(VisualFeatureInspector.class
                                    .getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(
                                    null, "Error opening file!");
                        }
                    } else {

                    }
                }
            }
            selectedMeasureCol = -1;
            selectedMeasureRow = -1;
            this.measuresAttributesComboBox.setSelectedIndex(0);
            refreshMeasuresMatrix(1, -1);
            this.measureComboBox.setSelectedIndex(0);
            refreshListMeasuresTable();
            refreshTimeSeriesComboBox();
            refreshIdTimeFFSComboBox();
            refreshListAttributesToNormalize();
            cleanTextArea();

            try {
                getDecisionTreeGraph();

            } catch (Exception ex) {
                System.out.println("Cannot handle unary class!");
            }

            refreshListFFSOriginalAttributes();
            this.ffsKTextField.setText("");
            this.ffsMethodLabel.setText("");
            this.pcDcpcBoolean = false;
            this.DCPC = null;
        }

    }//GEN-LAST:event_openMenuItemActionPerformed

    private void colorOptionsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorOptionsMenuItemActionPerformed

        ColorOptions colorOptions = new ColorOptions(VisualFeatureInspector.this, true);
        colorOptions.refreshColorsAndOrientation(listColors, listOrientation, selectedColor, selectedOrientation);
        colorOptions.setDefaultCloseOperation(VisualFeatureInspector.DISPOSE_ON_CLOSE);
        colorOptions.setTitle("Select options of color");
        colorOptions.setLocationRelativeTo(VisualFeatureInspector.this);
        if (colorOptions.display() == ColorOptions.BTN_OK) {
            VisualFeatureInspector.this.selectedColor = colorOptions.selectedColor;
            VisualFeatureInspector.this.selectedOrientation = colorOptions.selectedOrientation;
            paintFunction(2);
        }
    }//GEN-LAST:event_colorOptionsMenuItemActionPerformed


    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        JOptionPane.showMessageDialog(
                null, "Columns must be in the next order: Index - Id - Class - Attributes...!");
        if (this.distanceMatrix != null) {
            int result = SaveDialog.showSaveDialog(new DMATFilter(), this);
            if (result == JFileChooser.APPROVE_OPTION) {
                if (distanceMatrix != null) {
                    try {
                        distanceMatrix.save(SaveDialog.getFilename());

                    } catch (IOException ex) {
                        Logger.getLogger(VisualFeatureInspector.class
                                .getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(
                                null, "Error saving file!");
                    }
                }
            }
        } else {
            int result = SaveDialog.showSaveDialog(new DATAFilter(), this);

            if (result == JFileChooser.APPROVE_OPTION) {
                try {
                    DenseMatrix denseMatrix = this.createPointsMatrixFromView();
                    denseMatrix.save(SaveDialog.getFilename());

                } catch (IOException ex) {
                    Logger.getLogger(VisualFeatureInspector.class
                            .getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(
                            null, "Error saving file!");
                }
            }
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void paintFunction(int option) {
        int count = 0;
        int positionClass = -1;
        for (int i = 0; i < this.matrixTable.getColumnCount(); i++) {
            String name = this.matrixTable.getColumnName(i);
            if (name.equals("Class")) {
                positionClass = i;
                break;
            }

        }

        if (this.selectedIndexTab == 0) {
            if (this.selectedColor.equals("None") || this.selectedOrientation.equals("None")) {
                if (option == 1) {
                    JOptionPane.showMessageDialog(null, "Select a color and a orientation!");
                }
                TableCellRenderer renderer = new WhiteCustomTableCellRenderer();
                for (int i = 0; i < this.matrixTable.getColumnCount(); i++) {
                    //
                    this.matrixTable.setDefaultRenderer(this.matrixTable.getColumnClass(i), renderer);
                }
                this.matrixTable.setCellSelectionEnabled(true);
                this.matrixTable.repaint();
            } else {

                TableCellRenderer renderer = new CustomTableCellRenderer(this.selectedColor, this.selectedOrientation, listClusters, positionClass);

                for (int i = 0; i < this.matrixTable.getColumnCount(); i++) {
                    //
                    this.matrixTable.setDefaultRenderer(this.matrixTable.getColumnClass(i), renderer);
                }

                this.matrixTable.setCellSelectionEnabled(true);
                this.matrixTable.repaint();
            }
        } else {
            if (this.selectedColor.equals("None")) {
                TableCellRenderer renderer = new ListMeasuresWhiteCustomTableCellRenderer();
                for (int i = 0; i < this.listMeasuresTable.getColumnCount(); i++) {
                    //
                    this.listMeasuresTable.setDefaultRenderer(this.matrixTable.getColumnClass(i), renderer);
                }
                this.listMeasuresTable.setCellSelectionEnabled(true);
                this.listMeasuresTable.repaint();

                TableCellRenderer rendererTable = new MatrixMeasuresWhiteCustomTableCellRenderer();
                for (int i = 0; i < this.measuresTable.getColumnCount(); i++) {
                    this.measuresTable.setDefaultRenderer(this.matrixTable.getColumnClass(i), rendererTable);
                }
                this.measuresTable.setCellSelectionEnabled(true);
                this.measuresTable.repaint();
            } else {
                TableModel modelList = this.listMeasuresTable.getModel();
                ArrayList<Double> values = new ArrayList<>();
                for (int k = 0; k < modelList.getRowCount(); k++) {
                    values.add(Double.valueOf(modelList.getValueAt(k, 1).toString()));
                }
                TableCellRenderer renderer = new ListMeasuresCustomTableCellRenderer(this.selectedColor, Collections.max(values), Collections.min(values));
                this.listMeasuresTable.setDefaultRenderer(this.listMeasuresTable.getColumnClass(1), renderer);
                this.listMeasuresTable.repaint();

                TableModel modelMatrix = this.measuresTable.getModel();
                for (int i = 1; i < this.measuresTable.getColumnCount(); i++) {
                    ArrayList<Double> valuesTable = new ArrayList<>();
                    for (int k = 0; k < modelMatrix.getRowCount(); k++) {
                        valuesTable.add(Double.valueOf(modelMatrix.getValueAt(k, i).toString()));
                    }
                    TableCellRenderer rendererTable = new MatrixMeasuresCustomTableCellRenderer(this.selectedColor, Collections.max(valuesTable), Collections.min(valuesTable));
                    this.measuresTable.setDefaultRenderer(this.measuresTable.getColumnClass(i), rendererTable);

                }
                this.measuresTable.repaint();
            }

        }
    }
    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        int result = OpenDialog.showOpenDialog(new MatrixFilter(), this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String filename = OpenDialog.getFilename();
            this.nameDatabase = filename.substring(0, filename.indexOf("."));
            if (this.nameDatabase.contains("/")) {
                this.nameDatabase = this.nameDatabase.substring(this.nameDatabase.lastIndexOf("/") + 1);
            }
            if (filename.endsWith("data")) {
                typeMatrix = "data";

                try {
                    this.distanceMatrix = null;
                    this.joinButton.setEnabled(true);
                    this.matrixTable.setComponentPopupMenu(jPopupMenu1);

                    AbstractMatrix inputPointsMatrix = MatrixFactory.getInstance(filename);
                    this.selectedAttributes = null;
                    refreshTableData(inputPointsMatrix);
                    this.setTitle("Visual Feature Selection (VFS) - " + filename);
                    VisualFeatureInspector.pointsMatrix = inputPointsMatrix;

                } catch (IOException ex) {
                    Logger.getLogger(VisualFeatureInspector.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Error opening file!");
                }
            } else {
                if (filename.endsWith("dmat")) {
                    typeMatrix = "dmat";

                    try {
                        DistanceMatrix distMatrix = new DistanceMatrix(filename);
                        this.distanceMatrix = distMatrix;
                        VisualFeatureInspector.pointsMatrix = null;
                        this.joinButton.setEnabled(false);
                        this.matrixTable.setComponentPopupMenu(null);
                        refreshTableData(distMatrix);
                        this.setTitle("Visual Feature Selection (VFS) - " + filename);

                    } catch (IOException ex) {
                        Logger.getLogger(VisualFeatureInspector.class
                                .getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(
                                null, "Error opening file!");
                    }
                } else {
                    if (filename.endsWith("txt")) {
                        typeMatrix = "txt";

                        try {
                            this.distanceMatrix = null;
                            this.joinButton.setEnabled(true);
                            this.matrixTable.setComponentPopupMenu(jPopupMenu1);
                            AbstractMatrix inputPointsMatrix = MatrixFactory.getTxtInstance(filename);
                            this.selectedAttributes = null;
                            refreshTableData(inputPointsMatrix);
                            this.setTitle("Visual Feature Selection (VFS) - " + filename);
                            VisualFeatureInspector.pointsMatrix = inputPointsMatrix;

                        } catch (IOException ex) {
                            Logger.getLogger(VisualFeatureInspector.class
                                    .getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(
                                    null, "Error opening file!");
                        }
                    } else {

                    }
                }
            }
            selectedMeasureCol = -1;
            selectedMeasureRow = -1;
            this.measuresAttributesComboBox.setSelectedIndex(0);
            refreshMeasuresMatrix(1, -1);
            this.measureComboBox.setSelectedIndex(0);
            refreshListMeasuresTable();
            refreshTimeSeriesComboBox();
            refreshIdTimeFFSComboBox();
            refreshListAttributesToNormalize();
            cleanTextArea();
            try {
                getDecisionTreeGraph();

            } catch (Exception ex) {
                System.out.println("Cannot handle unary class!");
            }
            refreshListFFSOriginalAttributes();
            this.ffsKTextField.setText("");
            this.ffsMethodLabel.setText("");
            this.pcDcpcBoolean = false;
            this.DCPC = null;

        }

    }//GEN-LAST:event_openButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (this.distanceMatrix != null) {
            int result = SaveDialog.showSaveDialog(new DMATFilter(), this);

            if (result == JFileChooser.APPROVE_OPTION) {
                if (distanceMatrix != null) {
                    try {
                        distanceMatrix.save(SaveDialog.getFilename());

                    } catch (IOException ex) {
                        Logger.getLogger(VisualFeatureInspector.class
                                .getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(
                                null, "Error saving file!");
                    }
                }
            }
        } else {
            int result = SaveDialog.showSaveDialog(new DATAFilter(), this);

            if (result == JFileChooser.APPROVE_OPTION) {
                try {
                    DenseMatrix denseMatrix = this.createPointsMatrixFromView();
                    denseMatrix.save(SaveDialog.getFilename());

                } catch (IOException ex) {
                    Logger.getLogger(VisualFeatureInspector.class
                            .getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(
                            null, "Error saving file!");
                }
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void splitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitButtonActionPerformed
        // Versao para a matriz de distancias
        if (this.distanceMatrix != null) {
            if (this.matrixTable.getSelectedRows().length > 1) {
                int selectedRows[] = this.matrixTable.getSelectedRows();
                ArrayList<String> selectedItems = new ArrayList();
                for (int i = 0; i < selectedRows.length; i++) {
                    selectedItems.add((String) matrixTable.getValueAt(selectedRows[i], ID_COLUMN));
                }

                final DistanceMatrix splitedMatrix = MatrixOperator.splitDistanceMatrix(distanceMatrix, selectedItems);
                VisualFeatureInspector.splitCounter++;
                java.awt.EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        VisualFeatureInspector newView = new VisualFeatureInspector();
                        newView.joinButton.setEnabled(false);
                        newView.matrixTable.setComponentPopupMenu(null);
                        newView.refreshTableData(splitedMatrix);
                        newView.measuresAttributesComboBox.setSelectedIndex(0);
                        newView.refreshMeasuresMatrix(1, -1);
                        newView.refreshListMeasuresTable();
                        newView.refreshTimeSeriesComboBox();
                        newView.refreshIdTimeFFSComboBox();
                        newView.refreshListAttributesToNormalize();
                        newView.cleanTextArea();
                        newView.setDefaultCloseOperation(VisualFeatureInspector.DISPOSE_ON_CLOSE);
                        newView.setTitle("New splited matrix " + VisualFeatureInspector.splitCounter);
                        //newView.setSize(1601, 910);
                        newView.setVisible(true);
                    }
                });
            }
        } //Versao para a matriz de pontos
        else {
            if (VisualFeatureInspector.pointsMatrix != null && !typeMatrix.equals("txt")) {
                if (this.matrixTable.getSelectedRows().length > 1) {
                    int selectedRows[] = this.matrixTable.getSelectedRows();

                    ArrayList<String> selectedItems = new ArrayList();
                    for (int i = 0; i < selectedRows.length; i++) {
                        selectedItems.add((String) matrixTable.getValueAt(selectedRows[i], ID_COLUMN));
                    }

                    ArrayList<String> listSelectedColumns = new ArrayList<>();
                    int selectedColumns[] = matrixTable.getSelectedColumns();
                    for (int i = 0; i < matrixTable.getSelectedColumnCount(); i++) {
                        listSelectedColumns.add(matrixTable.getColumnName(selectedColumns[i]));
                    }
                    final DenseMatrix splitedMatrix = MatrixOperator.splitPointsMatrix((DenseMatrix) pointsMatrix, selectedItems, listSelectedColumns);
                    VisualFeatureInspector.splitCounter++;
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            VisualFeatureInspector newView = new VisualFeatureInspector();
                            newView.joinButton.setEnabled(true);
                            newView.matrixTable.setComponentPopupMenu(newView.jPopupMenu1);
                            newView.refreshTableData(splitedMatrix);
                            newView.measuresAttributesComboBox.setSelectedIndex(0);
                            newView.refreshMeasuresMatrix(1, -1);
                            newView.refreshListMeasuresTable();
                            newView.setDefaultCloseOperation(VisualFeatureInspector.DISPOSE_ON_CLOSE);
                            newView.setTitle("New splited matrix " + VisualFeatureInspector.splitCounter);
                            //newView.setSize(1601, 910);
                            newView.setVisible(true);
                            newView.selectedMeasureCol = -1;
                            newView.selectedMeasureRow = -1;
                            newView.measureComboBox.setSelectedIndex(0);
                            newView.refreshListMeasuresTable();
                            newView.refreshTimeSeriesComboBox();
                            newView.refreshIdTimeFFSComboBox();
                            newView.refreshListAttributesToNormalize();
                            newView.cleanTextArea();
                            try {
                                newView.getDecisionTreeGraph();

                            } catch (Exception ex) {
                                System.out.println("Cannot handle unary class!");
                            }
                        }
                    });
                }
            } else {
                if (VisualFeatureInspector.pointsMatrix != null && typeMatrix.equals("txt")) {
                    if (this.matrixTable.getSelectedRows().length > 1) {
                        int selectedRows[] = this.matrixTable.getSelectedRows();

                        ArrayList<String> selectedItems = new ArrayList();
                        for (int i = 0; i < selectedRows.length; i++) {
                            String value = (String) matrixTable.getValueAt(selectedRows[i], ID_COLUMN);
                            selectedItems.add(String.valueOf(value));
                        }

                        final TxtMatrix splitedMatrix = MatrixOperator.splitPointsMatrix((TxtMatrix) pointsMatrix, selectedItems, selectedAttributes);
                        VisualFeatureInspector.splitCounter++;
                        java.awt.EventQueue.invokeLater(new Runnable() {
                            @Override
                            public void run() {
                                VisualFeatureInspector newView = new VisualFeatureInspector();
                                newView.joinButton.setEnabled(true);
                                newView.matrixTable.setComponentPopupMenu(newView.jPopupMenu1);
                                newView.refreshTableData(splitedMatrix);
                                newView.measuresAttributesComboBox.setSelectedIndex(0);
                                newView.refreshMeasuresMatrix(1, -1);
                                newView.refreshListMeasuresTable();
                                newView.setDefaultCloseOperation(VisualFeatureInspector.DISPOSE_ON_CLOSE);
                                newView.setTitle("New splited matrix " + VisualFeatureInspector.splitCounter);
                                // newView.setSize(1601, 910);
                                newView.setVisible(true);
                                newView.selectedMeasureCol = -1;
                                newView.selectedMeasureRow = -1;
                                newView.measureComboBox.setSelectedIndex(0);
                                newView.refreshListMeasuresTable();
                                newView.refreshTimeSeriesComboBox();
                                newView.refreshIdTimeFFSComboBox();
                                newView.refreshListAttributesToNormalize();
                                newView.cleanTextArea();
                                try {
                                    newView.getDecisionTreeGraph();

                                } catch (Exception ex) {
                                    System.out.println("Cannot handle unary class!");
                                }
                            }
                        });
                    }
                } else {

                }
            }
        }
    }//GEN-LAST:event_splitButtonActionPerformed

    private void joinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinButtonActionPerformed
        int result = OpenDialog.showOpenDialog(new DATAFilter(), this);
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                String filename = OpenDialog.getFilename();

                AbstractMatrix inputMatrix = MatrixFactory.getInstance(filename);
                AbstractMatrix currentMatrix = this.createPointsMatrixFromView();

                final AbstractMatrix jointMatrix = MatrixOperator.joinPointsMatrix((DenseMatrix) currentMatrix, (DenseMatrix) inputMatrix);
                VisualFeatureInspector.joinCounter++;
                java.awt.EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        VisualFeatureInspector newView = new VisualFeatureInspector();
                        newView.refreshTableData(jointMatrix);
                        newView.measuresAttributesComboBox.setSelectedIndex(0);
                        newView.refreshMeasuresMatrix(1, -1);
                        newView.refreshListMeasuresTable();
                        newView.refreshTimeSeriesComboBox();
                        newView.refreshIdTimeFFSComboBox();
                        newView.refreshListAttributesToNormalize();
                        newView.cleanTextArea();
                        newView.setDefaultCloseOperation(VisualFeatureInspector.DISPOSE_ON_CLOSE);
                        newView.setTitle("New joined matrix " + VisualFeatureInspector.joinCounter);
                        //newView.setSize(1601, 910);
                        newView.setVisible(true);

                        newView.selectedMeasureCol = -1;
                        newView.selectedMeasureRow = -1;
                        newView.measureComboBox.setSelectedIndex(0);
                        newView.refreshListMeasuresTable();
                        newView.cleanTextArea();
                        try {
                            newView.getDecisionTreeGraph();

                        } catch (Exception ex) {
                            System.out.println("Cannot handle unary class!");
                        }
                    }
                });
            } catch (IOException ex) {
                Logger.getLogger(VisualFeatureInspector.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_joinButtonActionPerformed


    private void paintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paintButtonActionPerformed

        ColorOptions colorOptions = new ColorOptions(VisualFeatureInspector.this, true);
        colorOptions.refreshColorsAndOrientation(listColors, listOrientation, selectedColor, selectedOrientation);
        colorOptions.setDefaultCloseOperation(VisualFeatureInspector.DISPOSE_ON_CLOSE);
        colorOptions.setTitle("Select options of color");
        colorOptions.setLocationRelativeTo(VisualFeatureInspector.this);
        if (colorOptions.display() == ColorOptions.BTN_OK) {
            VisualFeatureInspector.this.selectedColor = colorOptions.selectedColor;
            VisualFeatureInspector.this.selectedOrientation = colorOptions.selectedOrientation;
            paintFunction(1);
        }
    }//GEN-LAST:event_paintButtonActionPerformed

    private void removeColButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeColButtonActionPerformed
        int[] listIndex = this.matrixTable.getSelectedColumns();
        for (int i = this.matrixTable.getSelectedColumnCount() - 1; i >= 0; i--) {
            Integer index = listIndex[i];
            if (index != -1) {
                String name = this.matrixTable.getColumnName(index);
                TableColumn tcol = this.matrixTable.getColumn(name);
                this.matrixTable.removeColumn(tcol);
                this.matrixTable.setCellSelectionEnabled(true);
                this.matrixTable.repaint();
            }
        }


    }//GEN-LAST:event_removeColButtonActionPerformed

    private void removeRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowButtonActionPerformed
        int[] listIndex = getSelectedRowsModelIndices();
        for (int i = listIndex.length - 1; i >= 0; i--) {
            Integer index = listIndex[i];

            if (index != -1) {

                ((DefaultTableModel) this.matrixTable.getModel()).removeRow(index);
                this.matrixTable.setCellSelectionEnabled(true);
                this.matrixTable.repaint();
            }
        }
    }//GEN-LAST:event_removeRowButtonActionPerformed

    private void removeRowNANButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowNANButtonActionPerformed
        for (int i = this.matrixTable.getRowCount() - 1; i >= 0; i--) {
            Boolean flagNAN = false;
            for (int j = 0; j < this.matrixTable.getColumnCount(); j++) {
                if (this.matrixTable.getValueAt(i, j).equals(Float.NaN)) {
                    flagNAN = true;
                    break;
                }
            }

            if (i != -1) {

                if (flagNAN.equals(true)) {
                    ((DefaultTableModel) this.matrixTable.getModel()).removeRow(i);
                    this.matrixTable.setCellSelectionEnabled(true);
                    this.matrixTable.repaint();
                }
            }
        }
    }//GEN-LAST:event_removeRowNANButtonActionPerformed

    private void exportDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportDataMenuItemActionPerformed
        int result = SaveDialog.showSaveDialog(new DATAFilter(), this);

        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                DenseMatrix denseMatrix = this.createPointsMatrixFromView();
                denseMatrix.save(SaveDialog.getFilename());

            } catch (IOException ex) {
                Logger.getLogger(VisualFeatureInspector.class
                        .getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(
                        null, "Error saving file!");
            }
        }
    }//GEN-LAST:event_exportDataMenuItemActionPerformed

    @SuppressWarnings("deprecation")
    private void mainTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mainTabbedPaneStateChanged
        JTabbedPane sourceTabbedPane = (JTabbedPane) evt.getSource();

        int index = sourceTabbedPane.getSelectedIndex();
        /**
         * 0 - Home ************************** 1 - Class Data
         * ************************** 2 - Measures ************************** 3
         * - Decision Tree ************************** 5 - Time Series
         * **************************4 - Data Mining **************************
         * 6 - FFS-MTS ************************** 7 - Graph Pro
         * **************************
         */
        this.selectedIndexTab = index;
        if (index == 0) {
            this.removeColButton.show();
            this.removeColButton.enable();
            this.removeRowButton.show();
            this.removeRowButton.enable();
            this.removeRowNANButton.show();
            this.removeRowNANButton.enable();
            this.splitButton.show();
            this.splitButton.enable();
            this.joinButton.show();
            this.joinButton.enable();

        } else {
            if (this.nameDatabase != null) {
                VisualFeatureInspector.pointsMatrix = this.createPointsMatrixFromView();
                this.selectedAttributes = VisualFeatureInspector.pointsMatrix.getAttributes();
                this.attributes = VisualFeatureInspector.pointsMatrix.getAttributes();

                if (index == 1) {
                    refreshListAttributesLabelData();
                    refreshListAttributesToNormalize();
                }
                if (index == 2) {

                    selectedMeasureCol = -1;
                    selectedMeasureRow = -1;
                    this.measuresAttributesComboBox.setSelectedIndex(0);
                    refreshMeasuresMatrix(1, -1);
                    this.measureComboBox.setSelectedIndex(0);
                    refreshListMeasuresTable();

                }
                if (index == 3) {
                    try {
                        getDecisionTreeGraph();

                    } catch (Exception ex) {
                        System.out.println("Cannot handle unary class!");
                    }
                }
                if (index == 4) {
                    refreshListFFSOriginalAttributes();
                }
                if (index == 5) {
                    refreshTimeSeriesComboBox();
                }

                if (index == 6) {

                    refreshListFFSOriginalAttributes();
                    refreshIdTimeFFSComboBox();
                }
            }

            this.removeColButton.hide();
            this.removeColButton.disable();
            this.removeRowButton.hide();
            this.removeRowButton.disable();
            this.removeRowNANButton.hide();
            this.removeRowNANButton.disable();
            this.splitButton.hide();
            this.splitButton.disable();
            this.joinButton.hide();
            this.joinButton.disable();

        }
        /*

         this.ffsKTextField.setText("");
         this.ffsMethodLabel.setText("");
         this.pcDcpcBoolean = false;
         this.DCPC = null;*/

    }//GEN-LAST:event_mainTabbedPaneStateChanged

    private void drawTimeSeriesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawTimeSeriesButtonActionPerformed
        @SuppressWarnings("deprecation")
        Object[] value = this.attributesTimeSeriesJList.getSelectedValues();
        String weekNumber = String.valueOf(this.weekNumberAttributeTimeSeriesComboBox.getSelectedItem());
        String timeOfWeek = String.valueOf(this.timeOfWeekComboBox.getSelectedItem());
        String timeVal = String.valueOf(this.timeValTimeSeriesComboBox.getSelectedItem());
        int[] index1 = this.attributesTimeSeriesJList.getSelectedIndices();
        int index2 = this.weekNumberAttributeTimeSeriesComboBox.getSelectedIndex();
        int index3 = this.timeOfWeekComboBox.getSelectedIndex();
        int indexTimeVal = this.timeValTimeSeriesComboBox.getSelectedIndex();
        int countIndex = index1.length;
        int initIndex = 0;

        if (value.length == 0) {
            JOptionPane.showMessageDialog(null, "Error select atributes!");
            return;
        }

        if (indexTimeVal == 0) {
            if (index1[0] == 0) {
                countIndex -= 1;
                initIndex = 1;
            }

            List<double[]> listValues = new ArrayList<>();
            List<String> listAttributes = new ArrayList<>();
            for (int l = initIndex; l < value.length; l++) {
                String currentValue = (String) value[l];
                double[] values = getVectorDataByAttribute(currentValue, attributes, pointsMatrix);
                listValues.add(values);
                listAttributes.add(currentValue);
            }
            if (listAttributes.size() > 0) {
                double[] wnList = null;
                double[] towList = null;
                if (index2 != 0 && index3 != 0) {
                    wnList = getVectorDataByAttribute(weekNumber, attributes, pointsMatrix);
                    towList = getVectorDataByAttribute(timeOfWeek, attributes, pointsMatrix);
                }
                this.timeSeriesLabel.setText("");

                TimeSeriesChart timeSeriesChart = new TimeSeriesChart(listValues, listAttributes, wnList, towList);

                try {
                    timeSeriesImage = timeSeriesChart.createBufferedImage((int) Math.round(this.getWidth() * .93), (int) Math.round(this.getHeight() * .38));
                    this.timeSeriesLabel.setIcon(new ImageIcon(timeSeriesImage));

                } catch (IOException ex) {
                    Logger.getLogger(VisualFeatureInspector.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

                this.timeSeriesLabel.setComponentPopupMenu(timeSeriesPopMenu);

                List<String> listNameClass = new ArrayList<>();
                listNameClass.add("Class");
                List<double[]> listValuesClass = new ArrayList<>();
                double[] valuesClass = new double[pointsMatrix.getRowCount()];
                for (int l = 0; l < pointsMatrix.getRowCount(); l++) {
                    valuesClass[l] = pointsMatrix.getRow(l).getKlass() * (-1);
                }
                listValuesClass.add(valuesClass);
                TimeSeriesChart timeSeriesClassChart = new TimeSeriesChart(listValuesClass, listNameClass, wnList, towList);
                try {
                    timeSeriesClassImage = timeSeriesClassChart.createBufferedImage((int) Math.round(this.getWidth() * .93), (int) Math.round(this.getHeight() * .18));
                    this.timeSeriesClassLabel.setIcon(new ImageIcon(timeSeriesClassImage));

                } catch (IOException ex) {
                    Logger.getLogger(VisualFeatureInspector.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

                this.timeSeriesClassLabel.setComponentPopupMenu(timeSeriesClassPopMenu);

            } else {
                JOptionPane.showMessageDialog(null, "Error!");
            }
        } else {

            //TODO:select time_val
            if (index1[0] == 0) {
                countIndex -= 1;
                initIndex = 1;
            }

            List<double[]> listValues = new ArrayList<>();
            List<String> listAttributes = new ArrayList<>();
            for (int l = initIndex; l < value.length; l++) {
                String currentValue = (String) value[l];
                double[] values = getVectorDataByAttributeByTimeVal(currentValue, attributes, pointsMatrix, timeVal);
                listValues.add(values);
                listAttributes.add(currentValue);
            }
            if (listAttributes.size() > 0) {
                double[] wnList = null;
                double[] towList = null;
                if (index2 != 0 && index3 != 0) {
                    wnList = getVectorDataByAttributeByTimeVal(weekNumber, attributes, pointsMatrix, timeVal);
                    towList = getVectorDataByAttributeByTimeVal(timeOfWeek, attributes, pointsMatrix, timeVal);
                }
                this.timeSeriesLabel.setText("");

                TimeSeriesChart timeSeriesChart = new TimeSeriesChart(listValues, listAttributes, wnList, towList);

                try {
                    timeSeriesImage = timeSeriesChart.createBufferedImage((int) Math.round(this.getWidth() * .93), (int) Math.round(this.getHeight() * .38));
                    this.timeSeriesLabel.setIcon(new ImageIcon(timeSeriesImage));

                } catch (IOException ex) {
                    Logger.getLogger(VisualFeatureInspector.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

                this.timeSeriesLabel.setComponentPopupMenu(timeSeriesPopMenu);

                List<String> listNameClass = new ArrayList<>();
                listNameClass.add("Class");
                List<double[]> listValuesClass = new ArrayList<>();
                List<Double> valuesClass = new ArrayList<>();
                int indexAttributeTimeVal = -1;
                for (int i = 0; i < attributes.size(); i++) {
                    if (attributes.get(i).equals("time_val")) {
                        indexAttributeTimeVal = i;
                        break;
                    }
                }

                for (int l = 0; l < pointsMatrix.getRowCount(); l++) {
                    if (pointsMatrix.getRow(l).getValue(indexAttributeTimeVal) == Float.valueOf(timeVal)) {
                        double valueTMP = pointsMatrix.getRow(l).getKlass() * (-1);
                        valuesClass.add(valueTMP);
                    }
                }

                double[] valuesClassDouble = new double[valuesClass.size()];
                for (int i = 0; i < valuesClassDouble.length; i++) {                    // or:
                    valuesClassDouble[i] = valuesClass.get(i);                // java 1.5+ style (outboxing)
                }

                listValuesClass.add(valuesClassDouble);
                TimeSeriesChart timeSeriesClassChart = new TimeSeriesChart(listValuesClass, listNameClass, wnList, towList);
                try {
                    timeSeriesClassImage = timeSeriesClassChart.createBufferedImage((int) Math.round(this.getWidth() * .93), (int) Math.round(this.getHeight() * .18));
                    this.timeSeriesClassLabel.setIcon(new ImageIcon(timeSeriesClassImage));

                } catch (IOException ex) {
                    Logger.getLogger(VisualFeatureInspector.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

                this.timeSeriesClassLabel.setComponentPopupMenu(timeSeriesClassPopMenu);

            } else {
                JOptionPane.showMessageDialog(null, "Error!");
            }
        }
    }//GEN-LAST:event_drawTimeSeriesButtonActionPerformed

    private void exportInvertedMatrixMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportInvertedMatrixMenuActionPerformed
        int result = SaveDialog.showSaveDialog(new DATAFilter(), this);

        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                DenseMatrix denseMatrix = this.createPointsMatrixFromView();
                denseMatrix.saveInvertedMatrix(SaveDialog.getFilename());

            } catch (IOException ex) {
                Logger.getLogger(VisualFeatureInspector.class
                        .getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(
                        null, "Error saving file!");
            }
        }
    }//GEN-LAST:event_exportInvertedMatrixMenuActionPerformed

    private void PrintScreenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintScreenMenuItemActionPerformed

        BufferedImage image = GraphicsEnvironment.getLocalGraphicsEnvironment()
                .getDefaultScreenDevice().getDefaultConfiguration()
                .createCompatibleImage(this.getWidth(), this.getHeight());
        Graphics graphics = image.createGraphics();
        // Print to BufferedImage
        this.paint(graphics);
        graphics.dispose();
        JFileChooser fileChooser = new JFileChooser();
        ExtensionFileFilter filter = new ExtensionFileFilter("PNG and png", new String[]{"PNG", "png"});
        fileChooser.setFileFilter(filter);
        fileChooser.setDialogTitle("Path of PrintScreen");
        DateFormat dateFormat = new SimpleDateFormat("yy-MM-dd HH:mm");
        Calendar cal = Calendar.getInstance();
        String time = dateFormat.format(cal.getTime());
        time = time.replace("-", "_");
        time = time.replace(":", "_");
        fileChooser.setSelectedFile(new File("printscreen-(" + time + ").png"));
        int result = fileChooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                String nameFile = fileChooser.getSelectedFile().toString();
                if (!nameFile.contains(".png") && !nameFile.contains(".PNG")) {
                    nameFile += ".png";
                }
                ImageIO.write(image, "png", new File(nameFile));

            } catch (IOException ex) {
                Logger.getLogger(VisualFeatureInspector.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_PrintScreenMenuItemActionPerformed

    private void exportWekaFormatMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportWekaFormatMenuActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        ExtensionFileFilter filter = new ExtensionFileFilter("ARFF and arff", new String[]{"ARFF", "arff"});
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {

            try {
                String nameFile = fileChooser.getSelectedFile().toString();
                if (!nameFile.contains(".arff") && !nameFile.contains(".ARFF")) {
                    nameFile += ".arff";
                }
                if (new File(nameFile).exists()) {
                    int result2 = JOptionPane.showConfirmDialog(this, "The file exists, overwrite?", "Existing file", JOptionPane.YES_NO_CANCEL_OPTION);
                    switch (result2) {
                        case JOptionPane.YES_OPTION:
                            DenseMatrix denseMatrix = this.createPointsMatrixFromView();
                            denseMatrix.saveWekaFormat(nameFile, this.nameDatabase, this.listClusters);
                        case JOptionPane.NO_OPTION:
                        case JOptionPane.CLOSED_OPTION:
                        case JOptionPane.CANCEL_OPTION:
                    }
                } else {
                    DenseMatrix denseMatrix = this.createPointsMatrixFromView();
                    denseMatrix.saveWekaFormat(nameFile, this.nameDatabase, this.listClusters);

                }
            } catch (IOException ex) {
                Logger.getLogger(VisualFeatureInspector.class
                        .getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(
                        null, "Error saving file!");
            }
        }

    }//GEN-LAST:event_exportWekaFormatMenuActionPerformed

    private void exportImageDecisionTreeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportImageDecisionTreeMenuActionPerformed
        BufferedImage image = GraphicsEnvironment.getLocalGraphicsEnvironment()
                .getDefaultScreenDevice().getDefaultConfiguration()
                .createCompatibleImage(this.getWidth(), this.getHeight());

        Graphics graphics = image.createGraphics();
        // Print to BufferedImage
        this.paint(graphics);
        graphics.dispose();
        JFileChooser fileChooser = new JFileChooser();
        ExtensionFileFilter filter = new ExtensionFileFilter("PNG and png", new String[]{"PNG", "png"});
        fileChooser.setFileFilter(filter);
        fileChooser.setDialogTitle("Path of PrintScreen");
        DateFormat dateFormat = new SimpleDateFormat("yy-MM-dd HH:mm");
        Calendar cal = Calendar.getInstance();
        String time = dateFormat.format(cal.getTime());
        time = time.replace("-", "_");
        time = time.replace(":", "_");
        fileChooser.setSelectedFile(new File("TreeVisualizer-(" + time + ").png"));
        int result = fileChooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                String nameFile = fileChooser.getSelectedFile().toString();
                if (!nameFile.contains(".png") && !nameFile.contains(".PNG")) {
                    nameFile += ".png";
                }
                ImageIO.write(image, "png", new File(nameFile));

            } catch (IOException ex) {
                Logger.getLogger(VisualFeatureInspector.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_exportImageDecisionTreeMenuActionPerformed

    private void cleanTreeVisualizer() {
        try {
            this.decisionTreeVisualizerPanel.removeAll();
        } catch (Exception e) {

        }
        try {
            this.treeVisualizer.removeAll();
        } catch (Exception e) {

        }

    }

    private void getDecisionTreeGraph() throws IOException, Exception {
        DenseMatrix denseMatrix = this.createPointsMatrixFromView();
        Calendar cal = Calendar.getInstance();
        String DATE_FORMAT_NOW = "yy-MM-dd-HH:mm";
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);
        String currentDate = sdf.format(cal.getTime());
        currentDate = currentDate.replace("-", "_");
        currentDate = currentDate.replace(":", "_");
        String newFileName = this.nameDatabase + "_" + currentDate;

        denseMatrix.saveWekaFormat(newFileName + ".arff", newFileName, this.listClusters);
        cleanTreeVisualizer();
        DecisionTree decisionTree = new DecisionTree(newFileName + ".arff");

        treeVisualizer = new TreeVisualizer(null, decisionTree.getDecissionTree().graph(), new PlaceNode1());

        this.decisionTreeVisualizerPanel.setLayout(new BorderLayout());
        this.decisionTreeVisualizerPanel.add(treeVisualizer, BorderLayout.CENTER);

        File fileDelete = new File(newFileName + ".arff");
        fileDelete.delete();

        this.decisionTreeVisualizerPanel.setVisible(true);
        this.decisionTreeVisualizerPanel.revalidate();
        treeVisualizer.fitToScreen();

    }

    private void cleanTextArea() {
        this.resultClassifierTextArea.setText("");
        //this.filterFeatureTextArea.setText("");

    }

    private void cleanResultClassifierTextArea(java.awt.event.ActionEvent evt) {
        this.resultClassifierTextArea.setText("");

    }
    private void classifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classifyButtonActionPerformed
        try {

            Chronometer ch = new Chronometer();
            ch.start();
            DenseMatrix denseMatrix = this.createPointsMatrixFromView();
            Calendar cal = Calendar.getInstance();
            String DATE_FORMAT_NOW = "yy-MM-dd-HH:mm";
            SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);
            String currentDate = sdf.format(cal.getTime());
                      currentDate = currentDate.replace("-", "_");
        currentDate = currentDate.replace(":", "_");
            String newFileName = this.nameDatabase + "-" + currentDate;
            denseMatrix.saveWekaFormat(newFileName + ".arff", newFileName, this.listClusters);

            String selectedClassifier = this.classifierComboBox.getSelectedItem().toString();
            switch (selectedClassifier) {

                case "J48 - Decision Tree":
                    System.out.println("J48 - Decision Tree");
                    J48DecisionTreeClassifier j48 = new J48DecisionTreeClassifier();
                    this.resultClassifierTextArea.setText(j48.classify(newFileName + ".arff"));
                    break;

                case "Multilayer Perceptron":
                    System.out.println("Multilayer Perceptron");
                    MultilayerPerceptronClassifier perceptron = new MultilayerPerceptronClassifier();
                    this.resultClassifierTextArea.setText(perceptron.classify(newFileName + ".arff"));
                    break;

                case "Support Vector Machine":
                    System.out.println("Support Vector Machine");
                    SupportVectorMachineClassifier libsvm = new SupportVectorMachineClassifier();
                    this.resultClassifierTextArea.setText(libsvm.classify(newFileName + ".arff"));
                    break;

                default:
                    this.resultClassifierTextArea.setText("");

            }
            ch.stop();
            System.out.println(ch.getSeconds());
            File newFile = new File(newFileName + ".arff");
            newFile.delete();

        } catch (IOException ex) {
            Logger.getLogger(VisualFeatureInspector.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_classifyButtonActionPerformed

    private void refreshMatrixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshMatrixButtonActionPerformed
        refreshMeasuresMatrix(1, -1);
    }//GEN-LAST:event_refreshMatrixButtonActionPerformed

    private void drawHistogramButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawHistogramButtonActionPerformed
        int row = this.listMeasuresTable.getSelectedRow();
        if (row > -1) {
            String value = this.listMeasuresTable.getValueAt(row, 0).toString();
            int blocks;
            try {
                blocks = Integer.valueOf(this.blocksTextField.getText());
            } catch (NumberFormatException e) {
                this.blocksTextField.setText("10");
                JOptionPane.showMessageDialog(null, "Enter a valid number in block's field.");
                blocks = 10;
            }
            double[] listValues = getVectorDataByAttribute(value, attributes, pointsMatrix);
            this.histogramImageLabel.setText("Histogram of Selected Attribute: " + value);
            HistogramChart histogramChart = new HistogramChart(listValues, blocks);
            try {
                histogramImage = histogramChart.createBufferedImage((int) Math.round(this.getWidth() * .3), (int) Math.round(this.getHeight() * .22));
                this.histogramLabel.setIcon(new ImageIcon(histogramImage));

            } catch (IOException ex) {
                Logger.getLogger(VisualFeatureInspector.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            this.histogramLabel.setComponentPopupMenu(histogramImagePopupMenu);
        }
    }//GEN-LAST:event_drawHistogramButtonActionPerformed

    private void rankAttributeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankAttributeButtonActionPerformed
        refreshListMeasuresTable();
    }//GEN-LAST:event_rankAttributeButtonActionPerformed


    private void clearCacheMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCacheMenuItemActionPerformed
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to clean cache?", "Clean?", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            File dir = new File(".");
            File[] files = dir.listFiles(new FilenameFilter() {
                @Override
                public boolean accept(File dir, String name) {
                    return name.toLowerCase().endsWith(".arff");
                }
            });

            try {
                for (File file : files) {
                    if (file.delete()) {
                        System.out.println(file.getName() + " was deleted!");
                    } else {
                        System.out.println("Delete operation is failed.");
                    }
                }

            } catch (Exception e) {
            }

        }

    }//GEN-LAST:event_clearCacheMenuItemActionPerformed


    private void createGraphProButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createGraphProButtonActionPerformed
        try {
            // TODO add your handling code here:
            Class classSelected = Class.forName("measures.Pearson");
            Object tableData[][] = measure2Attributes((Measure) classSelected.newInstance());

        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(VisualFeatureInspector.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_createGraphProButtonActionPerformed

    private void listClassificationsLabelDataComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listClassificationsLabelDataComboBoxActionPerformed
        if (this.listClassificationsLabelDataComboBox.getSelectedIndex() > 0) {
            try {
                String selectedClassificationS4 = this.listClassificationsLabelDataComboBox.getSelectedItem().toString();
                Class classSelected = Class.forName("classifications4." + selectedClassificationS4);
                S4Classification s4classification = (S4Classification) classSelected.newInstance();
                this.descriptionS4LabelDataTextArea.setText(s4classification.getDescription());

            } catch (InstantiationException | IllegalAccessException | ClassNotFoundException ex) {
                Logger.getLogger(VisualFeatureInspector.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_listClassificationsLabelDataComboBoxActionPerformed

    private void labelDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labelDataButtonActionPerformed
        if (this.listAttributesLabelDataComboBox.getSelectedIndex() > 0 && this.listClassificationsLabelDataComboBox.getSelectedIndex() > 0) {
            VisualFeatureInspector.s4ClassificationStr = this.listClassificationsLabelDataComboBox.getSelectedItem().toString();
            VisualFeatureInspector.s4Attribute = this.listAttributesLabelDataComboBox.getSelectedIndex() - 1;
            labelDataProgressBar.setIndeterminate(true);
            labelDataButton.setEnabled(false);
            //Instances of javax.swing.SwingWorker are not reusuable, so
            //we create new instances as needed.
            taskLabelData = new TaskLabelData();
            taskLabelData.addPropertyChangeListener(this);
            taskLabelData.execute();
            labelDataButton.setEnabled(true);

        } else {
            JOptionPane.showMessageDialog(null, "Selectthe S4 attribute and classification.");
        }
    }//GEN-LAST:event_labelDataButtonActionPerformed

    private void infoDataSetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoDataSetButtonActionPerformed
        InfoDataSet infoDataSet = new InfoDataSet(VisualFeatureInspector.this, true);
        if (nameDatabase != null) {
            DenseMatrix denseMatrix = this.createPointsMatrixFromView();
            float[] listClassFloat = denseMatrix.getClassData();
            List<Float> listClass = new ArrayList<>();
            for (int i = 0; i < listClassFloat.length; i++) {
                listClass.add(listClassFloat[i]);
            }

            List<String> listValueCluster = new ArrayList<>();
            for (Float listCluster : this.listClusters) {
                listValueCluster.add("" + listCluster + ": " + Collections.frequency(listClass, listCluster));
            }

            List<String> listValueTimeInterval = new ArrayList<>();
            if (denseMatrix.getAttributes().contains("time_interval")) {
                int indexTimeInterval = denseMatrix.getAttributes().indexOf("time_interval");
                List<Float> listTimeInterval = new ArrayList<>();
                HashSet<Float> hashTimeInterval = new HashSet<>();
                for (int i = 0; i < denseMatrix.getRowCount(); i++) {
                    listTimeInterval.add(denseMatrix.getRow(i).getValue(indexTimeInterval));
                    hashTimeInterval.add(denseMatrix.getRow(i).getValue(indexTimeInterval));
                }
                List<Float> listTimeIntervalOrder = new ArrayList<>(hashTimeInterval);
                Collections.sort(listTimeIntervalOrder);
                for (Float timeInterval : listTimeIntervalOrder) {
                    listValueTimeInterval.add("" + timeInterval + ": " + Collections.frequency(listTimeInterval, timeInterval));
                }
            } else {
                if (denseMatrix.getAttributes().contains("time_val")) {
                    int indexTimeInterval = denseMatrix.getAttributes().indexOf("time_val");
                    List<Float> listTimeInterval = new ArrayList<>();
                    HashSet<Float> hashTimeInterval = new HashSet<>();
                    for (int i = 0; i < denseMatrix.getRowCount(); i++) {
                        listTimeInterval.add(denseMatrix.getRow(i).getValue(indexTimeInterval));
                        hashTimeInterval.add(denseMatrix.getRow(i).getValue(indexTimeInterval));
                    }
                    List<Float> listTimeIntervalOrder = new ArrayList<>(hashTimeInterval);
                    Collections.sort(listTimeIntervalOrder);
                    for (Float timeInterval : listTimeIntervalOrder) {
                        listValueTimeInterval.add("" + timeInterval + ": " + Collections.frequency(listTimeInterval, timeInterval));
                    }
                }

            }
            infoDataSet.refreshInfoDataSet(nameDatabase, denseMatrix.getRowCount(), denseMatrix.getAttributes().size(), this.listClusters.size(), listValueCluster, listValueTimeInterval);
        }
        infoDataSet.setDefaultCloseOperation(VisualFeatureInspector.DISPOSE_ON_CLOSE);
        infoDataSet.setTitle("Dataset Information");
        infoDataSet.setLocationRelativeTo(VisualFeatureInspector.this);
        infoDataSet.display();

    }//GEN-LAST:event_infoDataSetButtonActionPerformed

    private void classifyButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classifyButton1ActionPerformed
        try {

            Chronometer ch = new Chronometer();
            ch.start();
            DenseMatrix denseMatrix = this.createPointsMatrixFromView();
            Calendar cal = Calendar.getInstance();
            String DATE_FORMAT_NOW = "yy-MM-dd-HH:mm";
            SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);
            String currentDate = sdf.format(cal.getTime());
            currentDate = currentDate.replace("-", "_");
            currentDate = currentDate.replace(":", "_");
            String newFileName = this.nameDatabase + "-" + currentDate;

            denseMatrix.saveWekaFormat(newFileName + ".arff", newFileName, this.listClusters);

            System.out.println("Number threads: " + numberThreads);
            String selectedClassifier = this.classifierComboBox.getSelectedItem().toString();
            switch (selectedClassifier) {

                case "J48 - Decision Tree":
                    System.out.println("J48 - Decision Tree");
                    J48DecisionTreeClassifier j48 = new J48DecisionTreeClassifier();
                    this.resultClassifierTextArea.setText(j48.classify2(newFileName + ".arff", numberThreads));
                    break;

                case "Multilayer Perceptron":
                    System.out.println("Multilayer Perceptron");
                    MultilayerPerceptronClassifier perceptron = new MultilayerPerceptronClassifier();
                    this.resultClassifierTextArea.setText(perceptron.classify2(newFileName + ".arff", numberThreads));
                    break;

                case "Support Vector Machine":
                    System.out.println("Support Vector Machine");
                    SupportVectorMachineClassifier libsvm = new SupportVectorMachineClassifier();
                    this.resultClassifierTextArea.setText(libsvm.classify2(newFileName + ".arff", numberThreads));
                    break;

                default:
                    this.resultClassifierTextArea.setText("");

            }
            ch.stop();
            System.out.println(ch.getSeconds());
            File newFile = new File(newFileName + ".arff");
            newFile.delete();

        } catch (IOException ex) {
            Logger.getLogger(VisualFeatureInspector.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_classifyButton1ActionPerformed

    private void ffsOriginalVariablesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ffsOriginalVariablesListValueChanged
        this.pcDcpcBoolean = false;
        this.DCPC = null;
    }//GEN-LAST:event_ffsOriginalVariablesListValueChanged

    private void pcaRankingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcaRankingButtonActionPerformed

        this.pcDcpcBoolean = false;
        this.DCPC = null;
        DefaultListModel listModel = (DefaultListModel) ffsResultVariablesList.getModel();
        listModel.removeAllElements();

        if (this.ffsOriginalVariablesList.getModel().getSize() == 0) {
            JOptionPane.showMessageDialog(null, "Error: Select a database.");
            return;
        } else {
            String value = this.ffsKTextField.getText();
            if (!isInteger(value)) {
                JOptionPane.showMessageDialog(null, "Error k: Enter an integer.");
                return;
            } else {

                if (Integer.valueOf(value) <= 0 || Integer.valueOf(value) > ffsOriginalVariablesList.getModel().getSize()) {
                    JOptionPane.showMessageDialog(null, "Error k: Enter a number greater than 0 and less than " + ffsOriginalVariablesList.getModel().getSize() + ".");
                    return;
                } else {
                    String value2 = this.ffsThresholdTextField.getText();
                    if (!isFloat(value2)) {
                        JOptionPane.showMessageDialog(null, "Error threshold &: Enter a float.");
                        return;
                    } else {
                        if (Float.valueOf(value2) <= 0 || Float.valueOf(value2) > 100) {
                            JOptionPane.showMessageDialog(null, "Error threshold &: Enter a number greater than 0 and less than 100.");
                            return;
                        } else {
                            if (this.idTimeFFSComboBox.getSelectedIndex() == 0) {
                                JOptionPane.showMessageDialog(null, "Select the id time.");
                                return;
                            }

                        }

                    }
                }
            }

        }

        this.ffsMethodLabel.setText("PCA Ranking");
        ffsKInteger = Integer.valueOf(this.ffsKTextField.getText());
        listSelectedValues = this.ffsOriginalVariablesList.getSelectedValuesList();

        listSelectedValues = new ArrayList();
        for (String selectedAttribute : this.selectedAttributes) {
            if (!selectedAttribute.equals(this.idTimeFFSComboBox.getSelectedItem().toString())) {
                listSelectedValues.add(selectedAttribute);
            }
        }
        //listSelectedValues = this.selectedAttributes;

        this.pcDcpcBoolean = true;
        FFS ffs = new FFS();
        Pair[] scoreVariables = ffs.ffsPCAApproximation(this.listSelectedValues, this.selectedAttributes, VisualFeatureInspector.pointsMatrix, this.ffsThresholdTextField.getText(), this.idTimeFFSComboBox.getSelectedItem().toString(), numberThreads);
        Arrays.sort(scoreVariables);
        DefaultListModel model = new DefaultListModel();

        for (int i = scoreVariables.length - 1; i >= 0; i--) {
            String value = (scoreVariables.length - i) + ": " + this.listSelectedValues.get(scoreVariables[i].index) + " - " + (scoreVariables[i].value);
            model.addElement(value);
            if ((scoreVariables.length - i) == this.ffsKInteger) {
                break;
            }
        }
        this.ffsResultVariablesList.setModel(model);

    }//GEN-LAST:event_pcaRankingButtonActionPerformed

    private void cleverClusterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleverClusterButtonActionPerformed
        if (this.pcDcpcBoolean == true && this.DCPC != null) {
            try {
                this.ffsMethodLabel.setText("CLever-Cluster");
                DefaultListModel listModel = (DefaultListModel) ffsResultVariablesList.getModel();
                listModel.removeAllElements();

                FFS ffs = new FFS();
                Pair[] scoreVariables = ffs.ffsCluster(this.DCPC, this.ffsKInteger);

                Arrays.sort(scoreVariables);
                DefaultListModel model = new DefaultListModel();

                for (int i = 0; i < scoreVariables.length; i++) {
                    String value = (i + 1) + ": " + this.listSelectedValues.get(scoreVariables[i].index) + " - " + (scoreVariables[i].value);
                    model.addElement(value);

                }
                this.ffsResultVariablesList.setModel(model);

            } catch (IOException ex) {
                Logger.getLogger(VisualFeatureInspector.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Error: Compute PC and DCPC.");
        }
    }//GEN-LAST:event_cleverClusterButtonActionPerformed

    private void pcDcpcCorrelationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcDcpcCorrelationButtonActionPerformed
        DefaultListModel listModel = (DefaultListModel) ffsResultVariablesList.getModel();
        listModel.removeAllElements();
        try {
            if (this.ffsOriginalVariablesList.getModel().getSize() == 0) {
                JOptionPane.showMessageDialog(null, "Error: Select a database.");
                return;
            } else {
                String value = this.ffsKTextField.getText();
                if (!isInteger(value)) {
                    JOptionPane.showMessageDialog(null, "Error k: Enter an integer.");
                    return;
                } else {

                    if (Integer.valueOf(value) <= 0 || Integer.valueOf(value) > ffsOriginalVariablesList.getModel().getSize()) {
                        JOptionPane.showMessageDialog(null, "Error k: Enter a number greater than 0 and less than " + ffsOriginalVariablesList.getModel().getSize() + ".");
                        return;
                    } else {
                        String value2 = this.ffsThresholdTextField.getText();
                        if (!isFloat(value2)) {
                            JOptionPane.showMessageDialog(null, "Error threshold &: Enter a float.");
                            return;
                        } else {
                            if (Float.valueOf(value2) <= 0 || Float.valueOf(value2) > 100) {
                                JOptionPane.showMessageDialog(null, "Error threshold &: Enter a number greater than 0 and less than 100.");
                                return;
                            } else {
                                if (this.idTimeFFSComboBox.getSelectedIndex() == 0) {
                                    JOptionPane.showMessageDialog(null, "Select the id time.");
                                    return;
                                }

                            }

                        }
                    }
                }

            }

            this.cleverRankButton.setEnabled(false);
            this.cleverClusterButton.setEnabled(false);
            this.cleverHybridButton.setEnabled(false);
            ffsKInteger = Integer.valueOf(this.ffsKTextField.getText());

            listSelectedValues = new ArrayList();
            for (String selectedAttribute : this.selectedAttributes) {
                if (!selectedAttribute.equals(this.idTimeFFSComboBox.getSelectedItem().toString())) {
                    listSelectedValues.add(selectedAttribute);
                }
            }
            //listSelectedValues = this.selectedAttributes;
            this.pcDcpcBoolean = true;

            FFS ffs = new FFS();
            this.DCPC = ffs.pcDcpcCorrelation(this.listSelectedValues, this.selectedAttributes, VisualFeatureInspector.pointsMatrix, this.ffsThresholdTextField.getText(), this.idTimeFFSComboBox.getSelectedItem().toString(), this.numberThreads);

            // printFloatMatrix(DCPC);
            JOptionPane.showMessageDialog(null, "DCPC created successfully.");
            this.cleverRankButton.setEnabled(true);
            this.cleverClusterButton.setEnabled(true);
            this.cleverHybridButton.setEnabled(true);

        } catch (IOException ex) {
            Logger.getLogger(VisualFeatureInspector.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pcDcpcCorrelationButtonActionPerformed

    private void cleverHybridButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleverHybridButtonActionPerformed
        if (this.pcDcpcBoolean == true && this.DCPC != null) {
            try {
                this.ffsMethodLabel.setText("CLever-Hybrid");
                DefaultListModel listModel = (DefaultListModel) ffsResultVariablesList.getModel();
                listModel.removeAllElements();

                FFS ffs = new FFS();
                Pair[] scoreVariables = ffs.ffsHybrid(this.DCPC, this.ffsKInteger);

                DefaultListModel model = new DefaultListModel();

                for (int i = 0; i < scoreVariables.length; i++) {
                    String value = (i + 1) + ": " + this.listSelectedValues.get(scoreVariables[i].index) + " - " + (scoreVariables[i].value);
                    model.addElement(value);

                }
                this.ffsResultVariablesList.setModel(model);

            } catch (IOException ex) {
                Logger.getLogger(VisualFeatureInspector.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Error: Compute PC and DCPC.");
        }
    }//GEN-LAST:event_cleverHybridButtonActionPerformed

    private void cleverRankButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleverRankButtonActionPerformed
        if (this.pcDcpcBoolean == true && this.DCPC != null) {
            this.ffsMethodLabel.setText("CLever-Rank");
            DefaultListModel listModel = (DefaultListModel) ffsResultVariablesList.getModel();
            listModel.removeAllElements();

            FFS ffs = new FFS();
            Pair[] scoreVariables = ffs.ffsRank(DCPC);

            Arrays.sort(scoreVariables);
            DefaultListModel model = new DefaultListModel();

            for (int i = scoreVariables.length - 1; i >= 0; i--) {
                String value = (scoreVariables.length - i) + ": " + this.listSelectedValues.get(scoreVariables[i].index) + " - " + (scoreVariables[i].value);
                model.addElement(value);
                if ((scoreVariables.length - i) == this.ffsKInteger) {
                    break;
                }
            }
            this.ffsResultVariablesList.setModel(model);

        } else {
            JOptionPane.showMessageDialog(null, "Error: Compute PC and DCPC.");
        }
    }//GEN-LAST:event_cleverRankButtonActionPerformed

    private void ffsThresholdTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ffsThresholdTextFieldKeyPressed
        this.pcDcpcBoolean = false;
        this.DCPC = null;
    }//GEN-LAST:event_ffsThresholdTextFieldKeyPressed

    private void ffsKTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ffsKTextFieldKeyPressed
        this.pcDcpcBoolean = false;
        this.DCPC = null;
    }//GEN-LAST:event_ffsKTextFieldKeyPressed

    private void selectFSSFeaturesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFSSFeaturesButtonActionPerformed

        if (this.ffsResultVariablesList.getModel().getSize() > 0) {
            ArrayList<String> listFeaturesFFS = new ArrayList<>();

            for (int i = 0; i < this.ffsResultVariablesList.getModel().getSize(); i++) {
                Object o = this.ffsResultVariablesList.getModel().getElementAt(i);
                String featureFFS = o.toString();
                listFeaturesFFS.add(featureFFS.substring(featureFFS.indexOf(": ") + 2, featureFFS.indexOf(" -")));
            }

            String selectTimeInterval = this.idTimeFFSComboBox.getSelectedItem().toString();

            for (String selectedAttribute : this.selectedAttributes) {
                if (!listFeaturesFFS.contains(selectedAttribute) && !selectedAttribute.equals(selectTimeInterval)) {
                    TableColumn tcol = this.matrixTable.getColumn(selectedAttribute);
                    this.matrixTable.removeColumn(tcol);
                    this.matrixTable.setCellSelectionEnabled(true);
                    this.matrixTable.repaint();
                }
            }
            this.selectedAttributes = listFeaturesFFS;
            selectedMeasureCol = -1;
            selectedMeasureRow = -1;
            this.measuresAttributesComboBox.setSelectedIndex(0);
            refreshMeasuresMatrix(1, -1);
            this.measureComboBox.setSelectedIndex(0);
            refreshListAttributesToNormalize();
            refreshListMeasuresTable();
            refreshTimeSeriesComboBox();
            refreshListAttributesToNormalize();
            refreshIdTimeFFSComboBox();
            cleanTextArea();
            try {
                getDecisionTreeGraph();

            } catch (Exception ex) {
                System.out.println("Cannot handle unary class!");
            }
            refreshListFFSOriginalAttributes();
            this.ffsKTextField.setText("");
            this.ffsMethodLabel.setText("");
            this.pcDcpcBoolean = false;
            this.DCPC = null;
        }
    }//GEN-LAST:event_selectFSSFeaturesButtonActionPerformed

    private void normalizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizeButtonActionPerformed
        int[] indices = this.attrToNormList.getSelectedIndices();
        StandarizationColumns sC = new StandarizationColumns();
        AbstractMatrix denseMatrix = sC.standarizationColumnsThread(pointsMatrix, indices, numberThreads);
        refreshTableData(denseMatrix);


    }//GEN-LAST:event_normalizeButtonActionPerformed

    private void downloadNormalizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadNormalizeButtonActionPerformed
        int[] indices = this.attrToNormList.getSelectedIndices();
        StandarizationColumns sC = new StandarizationColumns();
        AbstractMatrix denseMatrix = sC.standarizationColumnsThread(pointsMatrix, indices, numberThreads);
        int result = SaveDialog.showSaveDialog(new DATAFilter(), this);

        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                denseMatrix.save(SaveDialog.getFilename());

            } catch (IOException ex) {
                Logger.getLogger(VisualFeatureInspector.class
                        .getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(
                        null, "Error saving file!");
            }
        }
    }//GEN-LAST:event_downloadNormalizeButtonActionPerformed

    private void setThreadsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setThreadsMenuItemActionPerformed
        NumberThreads numberThreadOption = new NumberThreads(VisualFeatureInspector.this, true);
        numberThreadOption.refreshNumberThreads(this.numberThreads);
        numberThreadOption.setDefaultCloseOperation(VisualFeatureInspector.DISPOSE_ON_CLOSE);
        numberThreadOption.setTitle("Select number of threads");
        numberThreadOption.setLocationRelativeTo(VisualFeatureInspector.this);
        if (numberThreadOption.display() == ColorOptions.BTN_OK) {
            VisualFeatureInspector.this.numberThreads = numberThreadOption.selectedNumberThreads;
        }


    }//GEN-LAST:event_setThreadsMenuItemActionPerformed

    private void usedAttrJ48ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usedAttrJ48ButtonActionPerformed
        try {
            // TODO add your handling code here:
            DenseMatrix denseMatrix = this.createPointsMatrixFromView();
            Calendar cal = Calendar.getInstance();
            String DATE_FORMAT_NOW = "yy-MM-dd-HH:mm";
            SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);
            String currentDate = sdf.format(cal.getTime());
            currentDate = currentDate.replace("-", "_");
            currentDate = currentDate.replace(":", "_");
            String newFileName = this.nameDatabase + "-" + currentDate;

            denseMatrix.saveWekaFormat(newFileName + ".arff", newFileName, this.listClusters);
            DecisionTree decisionTree = new DecisionTree(newFileName + ".arff");
            String[] graph = decisionTree.getDecissionTree().graph().split("\n");
            List<String> listAttributesJ48 = new ArrayList<>();

            for (String graph1 : graph) {
                if (!graph1.contains("\"'") && graph1.contains("label=\"")) {
                    String attrJ48 = graph1.substring(graph1.indexOf("\"") + 1, graph1.lastIndexOf("\""));
                    if (!listAttributesJ48.contains(attrJ48)) {
                        listAttributesJ48.add(attrJ48);
                    }
                }
            }
            DefaultListModel model = new DefaultListModel();

            int i = 1;
            for (String attrJ48 : listAttributesJ48) {
                model.addElement("" + i + ": " + attrJ48);
                i++;
            }
            this.usedAttrJ48List.setModel(model);
            this.usedAttrJ48List.repaint();
            File fileDelete = new File(newFileName + ".arff");
            fileDelete.delete();

        } catch (IOException ex) {
            Logger.getLogger(VisualFeatureInspector.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(VisualFeatureInspector.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_usedAttrJ48ButtonActionPerformed

    private void filterUsedAttributesJ48ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterUsedAttributesJ48ButtonActionPerformed
        if (this.usedAttrJ48List.getModel().getSize() > 0) {
            ArrayList<String> listAttrJ48 = new ArrayList<>();

            for (int i = 0; i < this.usedAttrJ48List.getModel().getSize(); i++) {
                Object o = this.usedAttrJ48List.getModel().getElementAt(i);
                String attrJ48 = o.toString();
                listAttrJ48.add(attrJ48.substring(attrJ48.indexOf(": ") + 2));
            }

            for (String selectedAttribute : this.selectedAttributes) {
                if (!listAttrJ48.contains(selectedAttribute)) {
                    TableColumn tcol = this.matrixTable.getColumn(selectedAttribute);
                    this.matrixTable.removeColumn(tcol);
                    this.matrixTable.setCellSelectionEnabled(true);
                    this.matrixTable.repaint();
                }
            }
            this.selectedAttributes = listAttrJ48;
            selectedMeasureCol = -1;
            selectedMeasureRow = -1;
            this.measuresAttributesComboBox.setSelectedIndex(0);
            refreshMeasuresMatrix(1, -1);
            this.measureComboBox.setSelectedIndex(0);
            refreshListAttributesToNormalize();
            refreshListMeasuresTable();
            refreshTimeSeriesComboBox();
            refreshListAttributesToNormalize();
            refreshIdTimeFFSComboBox();
            cleanTextArea();
            try {
                getDecisionTreeGraph();

            } catch (Exception ex) {
                System.out.println("Cannot handle unary class!");
            }
            refreshListFFSOriginalAttributes();
            this.ffsKTextField.setText("");
            this.ffsMethodLabel.setText("");
            this.pcDcpcBoolean = false;
            this.DCPC = null;
        }
    }//GEN-LAST:event_filterUsedAttributesJ48ButtonActionPerformed

    private void pcDcpcCovarianceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcDcpcCovarianceButtonActionPerformed
        DefaultListModel listModel = (DefaultListModel) ffsResultVariablesList.getModel();
        listModel.removeAllElements();
        try {
            if (this.ffsOriginalVariablesList.getModel().getSize() == 0) {
                JOptionPane.showMessageDialog(null, "Error: Select a database.");
                return;
            } else {
                String value = this.ffsKTextField.getText();
                if (!isInteger(value)) {
                    JOptionPane.showMessageDialog(null, "Error k: Enter an integer.");
                    return;
                } else {

                    if (Integer.valueOf(value) <= 0 || Integer.valueOf(value) > ffsOriginalVariablesList.getModel().getSize()) {
                        JOptionPane.showMessageDialog(null, "Error k: Enter a number greater than 0 and less than " + ffsOriginalVariablesList.getModel().getSize() + ".");
                        return;
                    } else {
                        String value2 = this.ffsThresholdTextField.getText();
                        if (!isFloat(value2)) {
                            JOptionPane.showMessageDialog(null, "Error threshold &: Enter a float.");
                            return;
                        } else {
                            if (Float.valueOf(value2) <= 0 || Float.valueOf(value2) > 100) {
                                JOptionPane.showMessageDialog(null, "Error threshold &: Enter a number greater than 0 and less than 100.");
                                return;
                            } else {
                                if (this.idTimeFFSComboBox.getSelectedIndex() == 0) {
                                    JOptionPane.showMessageDialog(null, "Select the id time.");
                                    return;
                                }

                            }

                        }
                    }
                }

            }

            this.cleverRankButton.setEnabled(false);
            this.cleverClusterButton.setEnabled(false);
            this.cleverHybridButton.setEnabled(false);
            ffsKInteger = Integer.valueOf(this.ffsKTextField.getText());

            listSelectedValues = new ArrayList();
            for (String selectedAttribute : this.selectedAttributes) {
                if (!selectedAttribute.equals(this.idTimeFFSComboBox.getSelectedItem().toString())) {
                    listSelectedValues.add(selectedAttribute);
                }
            }
            //listSelectedValues = this.selectedAttributes;
            this.pcDcpcBoolean = true;

            FFS ffs = new FFS();
            this.DCPC = ffs.pcDcpcCovariance(this.listSelectedValues, this.selectedAttributes, VisualFeatureInspector.pointsMatrix, this.ffsThresholdTextField.getText(), this.idTimeFFSComboBox.getSelectedItem().toString(), this.numberThreads);

            // printFloatMatrix(DCPC);
            JOptionPane.showMessageDialog(null, "DCPC created successfully.");
            this.cleverRankButton.setEnabled(true);
            this.cleverClusterButton.setEnabled(true);
            this.cleverHybridButton.setEnabled(true);

        } catch (IOException ex) {
            Logger.getLogger(VisualFeatureInspector.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pcDcpcCovarianceButtonActionPerformed

    private void printDoubleMatrix(double[][] matrixDouble) {
        for (double[] matrixDouble1 : matrixDouble) {
            for (int j = 0; j < matrixDouble1.length; j++) {
                System.out.print(matrixDouble1[j] + " ");
            }
            System.out.println();
        }
    }

    private void printFloatMatrix(float[][] matrixFloat) {
        for (float[] matrixFloat1 : matrixFloat) {
            for (int j = 0; j < matrixFloat1.length; j++) {
                System.out.print(matrixFloat1[j] + " ");
            }
            System.out.println();
        }
    }

    private void selectAttributesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                AttributesSelector attributeSelector = new AttributesSelector(VisualFeatureInspector.this, true);
                attributeSelector.refreshTableValues(attributes, selectedAttributes);
                attributeSelector.setDefaultCloseOperation(VisualFeatureInspector.DISPOSE_ON_CLOSE);
                attributeSelector.setTitle("Select the attributes");
                attributeSelector.setLocationRelativeTo(VisualFeatureInspector.this);
                if (attributeSelector.display() == AttributesSelector.BTN_OK) {
                    VisualFeatureInspector.this.selectedAttributes = attributeSelector.getSelectedAttributes();
                    VisualFeatureInspector.this.refreshTableData(pointsMatrix);
                    VisualFeatureInspector.this.measuresAttributesComboBox.setSelectedIndex(0);
                    VisualFeatureInspector.this.refreshMeasuresMatrix(1, -1);
                    VisualFeatureInspector.this.refreshListMeasuresTable();
                    VisualFeatureInspector.this.refreshTimeSeriesComboBox();
                    VisualFeatureInspector.this.refreshListAttributesToNormalize();
                    VisualFeatureInspector.this.refreshIdTimeFFSComboBox();
                    VisualFeatureInspector.this.cleanTextArea();
                }
            }
        });
    }

    private void measuresCellRowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        this.measuresTable.clearSelection();
        ArrayList<String> localSelectedAttributes = new ArrayList<>();
        for (int i = 0; i < this.selectedAttributes.size(); i++) {
            if (i != selectedMeasureRow) {
                localSelectedAttributes.add(this.selectedAttributes.get(i));
            }
        }
        this.selectedAttributes = localSelectedAttributes;
        this.refreshTableData(pointsMatrix);
        this.refreshMeasuresMatrix(2, selectedMeasureRow);
        this.refreshListMeasuresTable();
        this.refreshTimeSeriesComboBox();
        this.refreshListAttributesToNormalize();
        this.refreshIdTimeFFSComboBox();
        this.cleanTextArea();
    }

    private void measuresCellColMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        this.measuresTable.clearSelection();
        ArrayList<String> localSelectedAttributes = new ArrayList<>();
        for (int i = 0; i < this.selectedAttributes.size(); i++) {
            if (i != selectedMeasureCol - 1) {
                localSelectedAttributes.add(this.selectedAttributes.get(i));
            }
        }
        this.selectedAttributes = localSelectedAttributes;
        this.refreshTableData(pointsMatrix);
        this.refreshMeasuresMatrix(3, selectedMeasureCol - 1);
        this.refreshListMeasuresTable();
        this.refreshTimeSeriesComboBox();
        this.refreshListAttributesToNormalize();
        this.refreshIdTimeFFSComboBox();
        this.cleanTextArea();
    }

    private void measuresColMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        /*this.measuresTable.clearSelection();
         ArrayList<String> localSelectedAttributes = new ArrayList<>();
         for (int i = 0; i < this.selectedAttributes.size(); i++) {
         if (i != selectedMeasureCol) {
         localSelectedAttributes.add(this.selectedAttributes.get(i));
         }
         }
         this.selectedAttributes = localSelectedAttributes;
         this.refreshTableData(pointsMatrix);
         this.refreshMeasuresMatrix(3, selectedMeasureCol);
         this.refreshListMeasuresTable();
         this.refreshTimeSeriesComboBox();
         this.refreshListAttributesToNormalize();
         this.refreshIdTimeFFSComboBox();
         this.cleanTextArea();*/

    }

    private void measuresRowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        this.measuresTable.clearSelection();
        ArrayList<String> localSelectedAttributes = new ArrayList<>();
        for (int i = 0; i < this.selectedAttributes.size(); i++) {
            if (i != selectedMeasureRow) {
                localSelectedAttributes.add(this.selectedAttributes.get(i));
            }
        }
        this.selectedAttributes = localSelectedAttributes;
        this.refreshTableData(pointsMatrix);
        this.refreshMeasuresMatrix(2, selectedMeasureRow);
        this.refreshListMeasuresTable();
        this.refreshTimeSeriesComboBox();
        this.refreshIdTimeFFSComboBox();
        this.refreshListAttributesToNormalize();
        this.cleanTextArea();
    }

    private void measuresListMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        int[] rows = this.listMeasuresTable.getSelectedRows();
        for (int k = 0; k < rows.length; k++) {
            int row = rows[k];
            if (row >= 0 && row < this.listMeasuresTable.getRowCount()) {
                String value = this.listMeasuresTable.getValueAt(row, 0).toString();
                ArrayList<String> localSelectedAttributes = new ArrayList<>();
                for (String selectedAttribute : this.selectedAttributes) {
                    if (!selectedAttribute.equals(value)) {
                        localSelectedAttributes.add(selectedAttribute);
                    }
                }
                this.selectedAttributes = localSelectedAttributes;

            }
        }
        this.refreshTableData(pointsMatrix);
        this.refreshMeasuresMatrix(1, -1);
        this.refreshListMeasuresTable();
        this.refreshTimeSeriesComboBox();
        this.refreshIdTimeFFSComboBox();
        this.refreshListAttributesToNormalize();
        this.cleanTextArea();
    }

    private void histogramImageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        int result = SaveDialog.showSaveDialog(new PNGFilter(), this);
        if (result == JFileChooser.APPROVE_OPTION) {
            if (histogramImage != null) {
                try {
                    File outputfile = new File(SaveDialog.getFilename());
                    ImageIO.write(histogramImage, "png", outputfile);

                } catch (IOException ex) {
                    Logger.getLogger(VisualFeatureInspector.class
                            .getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(
                            null, "Error saving file!");
                }
            }
        }
    }

    private void timeSeriesClassMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        int result = SaveDialog.showSaveDialog(new PNGFilter(), this);
        if (result == JFileChooser.APPROVE_OPTION) {
            if (timeSeriesClassImage != null) {
                try {
                    File outputfile = new File(SaveDialog.getFilename());
                    ImageIO.write(timeSeriesClassImage, "png", outputfile);

                } catch (IOException ex) {
                    Logger.getLogger(VisualFeatureInspector.class
                            .getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(
                            null, "Error saving file!");
                }
            }
        }
    }

    private void timeSeriesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        int result = SaveDialog.showSaveDialog(new PNGFilter(), this);
        if (result == JFileChooser.APPROVE_OPTION) {
            if (timeSeriesImage != null) {
                try {
                    File outputfile = new File(SaveDialog.getFilename());
                    ImageIO.write(timeSeriesImage, "png", outputfile);

                } catch (IOException ex) {
                    Logger.getLogger(VisualFeatureInspector.class
                            .getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(
                            null, "Error saving file!");
                }
            }
        }
    }

    private Object[][] measureRanking(Measure measure) {
        return measure.calculateRanking(attributes, selectedAttributes, pointsMatrix);
    }

    private void refreshListMeasuresTable() {
        try {
            String selectedMeasureString = this.measureComboBox.getSelectedItem().toString();
            Class classSelected = Class.forName("measures." + selectedMeasureString);
            Object tableData[][] = measureRanking((Measure) classSelected.newInstance());

            Object columnNames[] = {"Attribute", "Value"};

            DefaultTableModel model = new DefaultTableModel(tableData, columnNames) {

                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };

            listMeasuresTable.setModel(model);
            TableRowSorter rowSorter = new TableRowSorter(listMeasuresTable.getModel());
            rowSorter.setComparator(1, new FloatComparator());
            rowSorter.setComparator(0, new StringComparator());

            listMeasuresTable.createDefaultColumnsFromModel();
            listMeasuresTable.setRowSorter(rowSorter);
            listMeasuresTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            listMeasuresTable.setAutoscrolls(true);
            listMeasuresTable.setSelectionBackground(Color.getHSBColor(25, 25, 25));
            listMeasuresTable.setSelectionForeground(Color.RED);
            listMeasuresTable.setEnabled(true);

            if (this.selectedColor.equals("None")) {
                TableCellRenderer renderer = new ListMeasuresWhiteCustomTableCellRenderer();
                for (int i = 0; i < this.listMeasuresTable.getColumnCount(); i++) {
                    //
                    this.listMeasuresTable.setDefaultRenderer(this.matrixTable.getColumnClass(i), renderer);
                }
                this.listMeasuresTable.setCellSelectionEnabled(true);
            } else {
                TableModel modelList = this.listMeasuresTable.getModel();
                ArrayList<Double> values = new ArrayList<>();
                for (int k = 0; k < modelList.getRowCount(); k++) {
                    values.add(Double.valueOf(modelList.getValueAt(k, 1).toString()));
                }
                TableCellRenderer renderer = new ListMeasuresCustomTableCellRenderer(this.selectedColor, Collections.max(values), Collections.min(values));
                for (int i = 0; i < this.listMeasuresTable.getColumnCount(); i++) {
                    this.listMeasuresTable.setDefaultRenderer(this.listMeasuresTable.getColumnClass(i), renderer);
                }

            }

            listMeasuresTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
            listMeasuresScrollPane.setAutoscrolls(true);
            listMeasuresScrollPane.setEnabled(true);
            listMeasuresTable.setComponentPopupMenu(this.measuresListPopupMenu);
            listMeasuresScrollPane.requestFocusInWindow();

        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(VisualFeatureInspector.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void refreshListAttributesLabelData() {
        Object[] items = new Object[this.selectedAttributes.size() + 1];
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        items[0] = "Select S4 attribute";
        model.addElement(items[0]);
        for (int i = 0; i < this.selectedAttributes.size(); i++) {
            items[i + 1] = this.selectedAttributes.get(i);
            model.addElement(items[i + 1]);
        }

        this.listAttributesLabelDataComboBox.setModel(model);
        this.listAttributesLabelDataComboBox.repaint();
        this.listClassificationsLabelDataComboBox.repaint();
    }

    private void refreshListFFSOriginalAttributes() {
        DefaultListModel model = new DefaultListModel();

        for (String selectedAttribute : this.selectedAttributes) {
            model.addElement(selectedAttribute);
        }
        this.ffsOriginalVariablesList.setModel(model);
        this.ffsOriginalVariablesList.repaint();

        DefaultListModel model2 = new DefaultListModel();
        this.ffsResultVariablesList.setModel(model2);
        this.ffsResultVariablesList.repaint();

        DefaultListModel model3 = new DefaultListModel();
        this.usedAttrJ48List.setModel(model3);
        this.usedAttrJ48List.repaint();

    }

    private Object[][] measure2Attributes(Measure measure) {
        return measure.calculateMatrix(attributes, selectedAttributes, pointsMatrix, numberThreads);
    }

    private void refreshListAttributesToNormalize() {
        DefaultListModel model = new DefaultListModel();

        for (String selectedAttribute : this.selectedAttributes) {
            model.addElement(selectedAttribute);
        }
        this.attrToNormList.setModel(model);
        this.attrToNormList.repaint();
    }

    private void refreshIdTimeFFSComboBox() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        model.addElement("Select attribute");
        for (String selectedAttribute : this.selectedAttributes) {
            model.addElement(selectedAttribute);
        }
        this.idTimeFFSComboBox.setModel(model);
        this.idTimeFFSComboBox.repaint();
    }

    private void refreshTimeSeriesComboBox() {
        Object[] items = new Object[this.selectedAttributes.size() + 1];
        DefaultListModel model = new DefaultListModel();

        items[0] = "Select attribute";
        model.addElement(items[0]);
        for (int i = 0; i < this.selectedAttributes.size(); i++) {
            items[i + 1] = this.selectedAttributes.get(i);
            model.addElement(items[i + 1]);
        }
        this.attributesTimeSeriesJList.setModel(model);
        this.attributesTimeSeriesJList.repaint();

        ComboBoxModel model2 = new DefaultComboBoxModel(items);
        this.weekNumberAttributeTimeSeriesComboBox.setModel(model2);
        this.weekNumberAttributeTimeSeriesComboBox.repaint();

        ComboBoxModel model3 = new DefaultComboBoxModel(items);
        this.timeOfWeekComboBox.setModel(model3);
        this.timeOfWeekComboBox.repaint();

        if (pointsMatrix.getAttributes().contains("time_val")) {
            int indexTimeInterval = pointsMatrix.getAttributes().indexOf("time_val");
            HashSet<Float> hashTimeInterval = new HashSet<>();
            for (int i = 0; i < pointsMatrix.getRowCount(); i++) {
                hashTimeInterval.add(pointsMatrix.getRow(i).getValue(indexTimeInterval));
            }
            List<Float> listTimeIntervalOrder = new ArrayList<>(hashTimeInterval);
            Collections.sort(listTimeIntervalOrder);

            Object[] itemsTimeVal = new Object[listTimeIntervalOrder.size() + 1];
            itemsTimeVal[0] = "Select all time";
            for (int l = 0; l < listTimeIntervalOrder.size(); l++) {
                itemsTimeVal[l + 1] = listTimeIntervalOrder.get(l);
            }
            ComboBoxModel modelTimeVal = new DefaultComboBoxModel(itemsTimeVal);
            this.timeValTimeSeriesComboBox.setModel(modelTimeVal);
            this.timeOfWeekComboBox.repaint();
        } else {
            Object[] itemsTimeVal = new Object[1];
            itemsTimeVal[0] = "Select all time";
            ComboBoxModel modelTimeVal = new DefaultComboBoxModel(itemsTimeVal);
            this.timeValTimeSeriesComboBox.setModel(modelTimeVal);
            this.timeOfWeekComboBox.repaint();
        }

        this.timeSeriesLabel.setText("");
        this.histogramImageLabel.setText("");

        HistogramChart histogramChart = new HistogramChart(null, 0);
        try {
            histogramImage = histogramChart.createBufferedImage((int) Math.round(this.getWidth() * .3), (int) Math.round(this.getHeight() * .22));
            this.histogramLabel.setIcon(new ImageIcon(histogramImage));
            this.histogramLabel.repaint();

        } catch (IOException ex) {
            Logger.getLogger(VisualFeatureInspector.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        this.histogramLabel.setComponentPopupMenu(histogramImagePopupMenu);
        this.histogramLabel.repaint();

        TimeSeriesChart timeSeriesChart = new TimeSeriesChart(null, null, null, null);

        try {

            timeSeriesImage = timeSeriesChart.createBufferedImage((int) Math.round(this.getWidth() * .93), (int) Math.round(this.getHeight() * .38));
            this.timeSeriesLabel.setIcon(new ImageIcon(timeSeriesImage));
            this.timeSeriesLabel.repaint();

        } catch (IOException ex) {
            Logger.getLogger(VisualFeatureInspector.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        this.timeSeriesLabel.setComponentPopupMenu(timeSeriesPopMenu);
        this.timeSeriesLabel.repaint();

        TimeSeriesChart timeSeriesClassChart = new TimeSeriesChart(null, null, null, null);
        try {
            timeSeriesClassImage = timeSeriesClassChart.createBufferedImage((int) Math.round(this.getWidth() * .93), (int) Math.round(this.getHeight() * .18));
            this.timeSeriesClassLabel.setIcon(new ImageIcon(timeSeriesClassImage));

        } catch (IOException ex) {
            Logger.getLogger(VisualFeatureInspector.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        this.timeSeriesClassLabel.setComponentPopupMenu(timeSeriesClassPopMenu);
        this.timeSeriesClassLabel.repaint();
        cleanTextArea();
    }

    private Object[][] removeByRow(DefaultTableModel bTableModel, int row) {
        int tableRow = bTableModel.getRowCount();
        int tableCol = bTableModel.getColumnCount();
        Object[][] table2 = new Object[tableRow - 1][tableCol - 1];

        int countR = 0;
        for (int i = 0; i < tableRow; i++) {

            int countC = 0;
            for (int j = 0; j < tableCol; j++) {
                if (i != row && j != (row + 1)) {
                    table2[countR][countC] = bTableModel.getValueAt(i, j);
                    countC++;
                }

            }

            if (i != row) {
                countR++;
            }
        }
        return table2;

    }

    private Object[][] removeByCol(DefaultTableModel bTableModel, int col) {

        int tableRow = bTableModel.getRowCount();
        int tableCol = bTableModel.getColumnCount();
        Object[][] table2 = new Object[tableRow - 1][tableCol - 1];
        int countR = 0;
        for (int i = 0; i < tableRow; i++) {
            int countC = 0;
            for (int j = 0; j < tableCol; j++) {
                if (i != (col) && j != (col + 1)) {
                    table2[countR][countC] = bTableModel.getValueAt(i, j);
                    countC++;
                }
            }
            if (i != (col)) {
                countR++;
            }
        }
        return table2;

    }

    private void refreshMeasuresMatrix(int option, int selectedRowCol) {
        if (option == 1) {
            try {
                if (this.selectedAttributes != null) {
                    final Object columnNames[] = new Object[this.selectedAttributes.size() + 1];
                    columnNames[0] = "";
                    for (int i = 0; i < this.selectedAttributes.size(); i++) {
                        columnNames[i + 1] = this.selectedAttributes.get(i);
                    }
                    String selectedMeasureString = this.measuresAttributesComboBox.getSelectedItem().toString();
                    Class classSelected = Class.forName("measures." + selectedMeasureString);
                    final Object tableData[][] = measure2Attributes((Measure) classSelected.newInstance());

                    int wCell = Math.round(this.measuresScrollPane.getWidth() / (columnNames.length));
                    int hCell = Math.round(this.measuresScrollPane.getHeight() / (columnNames.length));

                    if (hCell < 24) {
                        hCell = 24;
                    }

                    if (wCell < 100) {
                        wCell = 100;
                    }
                    DefaultTableModel tableModel = new DefaultTableModel(tableData, columnNames) {
                        private static final long serialVersionUID = 1L;

                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false;
                        }

                    };
                    this.measuresTable.setModel(tableModel);
                    TableRowSorter rowSorter = new TableRowSorter(measuresTable.getModel());
                    for (int i = 1; i < this.measuresTable.getColumnCount(); i++) {
                        rowSorter.setComparator(i, new FloatComparator());
                    }
                    rowSorter.setComparator(0, new StringComparator());
//                measuresTable.setRowHeight(hCell);

                    measuresTable.setRowSorter(rowSorter);
                    measuresTable.createDefaultColumnsFromModel();
                    measuresTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    measuresTable.setAutoscrolls(true);
                    measuresTable.setSelectionBackground(Color.getHSBColor(25, 25, 25));
                    measuresTable.setSelectionForeground(Color.RED);
                    measuresTable.setEnabled(true);

                    /* measuresTable.getTableHeader().setComponentPopupMenu(measuresColPopupMenu);
                     measuresTable.getTableHeader().addMouseListener(new MouseAdapter() {
                     @Override
                     public void mouseClicked(MouseEvent e) {
                     measuresTable.clearSelection();
                     selectedMeasureCol = -1;
                     selectedMeasureRow = -1;
                     }

                     @Override
                     public void mouseReleased(MouseEvent e) {
                     if (SwingUtilities.isRightMouseButton(e)) {
                     int col = measuresTable.columnAtPoint(e.getPoint());
                     int row = -1;
                     selectedMeasureCol = col;
                     selectedMeasureRow = row;

                     }
                     measuresTable.clearSelection();
                     }
                     });*/
                    measuresTable.setRowSelectionAllowed(false);
                    measuresTable.setColumnSelectionAllowed(false);
                    measuresTable.setSelectionBackground(Color.getHSBColor(25, 25, 25));
                    measuresTable.setSelectionForeground(Color.RED);
                    measuresTable.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            int col = measuresTable.columnAtPoint(e.getPoint());
                            int row = measuresTable.rowAtPoint(e.getPoint());
                            selectedMeasureCol = col;
                            selectedMeasureRow = row;
                            if (col == 0) {
                                selectedMeasureCol = -1;

                            }
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            if (SwingUtilities.isRightMouseButton(e)) {
                                int col = measuresTable.columnAtPoint(e.getPoint());
                                int row = measuresTable.rowAtPoint(e.getPoint());
                                selectedMeasureCol = col;
                                selectedMeasureRow = row;
                                if (col == 0) {
                                    selectedMeasureCol = -1;

                                }

                            }
                        }
                    });

                    if (this.selectedColor.equals("None")) {
                        TableCellRenderer renderer = new MatrixMeasuresWhiteCustomTableCellRenderer();
                        for (int i = 0; i < this.measuresTable.getColumnCount(); i++) {
                            this.measuresTable.setDefaultRenderer(this.matrixTable.getColumnClass(i), renderer);
                        }
                        this.measuresTable.setCellSelectionEnabled(true);
                    } else {
                        TableModel modelMatrix = this.measuresTable.getModel();
                        for (int i = 1; i < this.measuresTable.getColumnCount(); i++) {
                            ArrayList<Double> values = new ArrayList<>();
                            for (int k = 0; k < modelMatrix.getRowCount(); k++) {
                                values.add(Double.valueOf(modelMatrix.getValueAt(k, i).toString()));
                            }

                            TableCellRenderer renderer = new MatrixMeasuresCustomTableCellRenderer(this.selectedColor, Collections.max(values), Collections.min(values));
                            this.measuresTable.setDefaultRenderer(this.measuresTable.getColumnClass(i), renderer);

                        }

                    }

                    ((DefaultTableCellRenderer) measuresTable.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
                    measuresTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                    measuresScrollPane.setAutoscrolls(true);
                    measuresScrollPane.setEnabled(true);
                    measuresTable.setComponentPopupMenu(this.measuresCellPopupMenu);
                    measuresScrollPane.requestFocusInWindow();

                }

            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
                Logger.getLogger(VisualFeatureInspector.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            if (option == 2) {

                if (this.selectedAttributes != null) {
                    final Object columnNames[] = new Object[this.selectedAttributes.size() + 1];
                    columnNames[0] = "";
                    for (int i = 0; i < this.selectedAttributes.size(); i++) {
                        columnNames[i + 1] = this.selectedAttributes.get(i);
                    }

                    DefaultTableModel bTableModel = (DefaultTableModel) this.measuresTable.getModel();

                    final Object tableData[][] = removeByRow(bTableModel, selectedRowCol);

                    int wCell = Math.round(this.measuresScrollPane.getWidth() / (columnNames.length));
                    int hCell = Math.round(this.measuresScrollPane.getHeight() / (columnNames.length));

                    if (hCell < 24) {
                        hCell = 24;
                    }
                    if (wCell < 100) {
                        wCell = 100;
                    }
                    DefaultTableModel tableModel = new DefaultTableModel(tableData, columnNames) {
                        private static final long serialVersionUID = 1L;

                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false;
                        }

                    };
                    this.measuresTable.setModel(tableModel);
                    TableRowSorter rowSorter = new TableRowSorter(measuresTable.getModel());
                    for (int i = 1; i < this.measuresTable.getColumnCount(); i++) {
                        rowSorter.setComparator(i, new FloatComparator());
                    }
                    rowSorter.setComparator(0, new StringComparator());
//                measuresTable.setRowHeight(hCell);

                    measuresTable.setRowSorter(rowSorter);
                    measuresTable.createDefaultColumnsFromModel();
                    measuresTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    measuresTable.setAutoscrolls(true);
                    measuresTable.setSelectionBackground(Color.getHSBColor(25, 25, 25));
                    measuresTable.setSelectionForeground(Color.RED);
                    measuresTable.setEnabled(true);

                    /*                    measuresTable.getTableHeader().setComponentPopupMenu(measuresColPopupMenu);
                     measuresTable.getTableHeader().addMouseListener(new MouseAdapter() {
                     @Override
                     public void mouseClicked(MouseEvent e) {
                     measuresTable.clearSelection();
                     selectedMeasureCol = -1;
                     selectedMeasureRow = -1;
                     }

                     @Override
                     public void mouseReleased(MouseEvent e) {
                     if (SwingUtilities.isRightMouseButton(e)) {
                     int col = measuresTable.columnAtPoint(e.getPoint());
                     int row = -1;
                     selectedMeasureCol = col;
                     selectedMeasureRow = row;

                     }
                     measuresTable.clearSelection();
                     }
                     });*/
                    measuresTable.setRowSelectionAllowed(false);
                    measuresTable.setColumnSelectionAllowed(false);
                    measuresTable.setSelectionBackground(Color.getHSBColor(25, 25, 25));
                    measuresTable.setSelectionForeground(Color.RED);
                    measuresTable.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            int col = measuresTable.columnAtPoint(e.getPoint());
                            int row = measuresTable.rowAtPoint(e.getPoint());
                            selectedMeasureCol = col;
                            selectedMeasureRow = row;
                            if (col == 0) {
                                selectedMeasureCol = -1;

                            }
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            if (SwingUtilities.isRightMouseButton(e)) {
                                int col = measuresTable.columnAtPoint(e.getPoint());
                                int row = measuresTable.rowAtPoint(e.getPoint());
                                selectedMeasureCol = col;
                                selectedMeasureRow = row;
                                if (col == 0) {
                                    selectedMeasureCol = -1;

                                }

                            }
                        }
                    });

                    if (this.selectedColor.equals("None")) {
                        TableCellRenderer renderer = new MatrixMeasuresWhiteCustomTableCellRenderer();
                        for (int i = 0; i < this.measuresTable.getColumnCount(); i++) {
                            this.measuresTable.setDefaultRenderer(this.matrixTable.getColumnClass(i), renderer);
                        }
                        this.measuresTable.setCellSelectionEnabled(true);
                    } else {
                        TableModel modelMatrix = this.measuresTable.getModel();
                        for (int i = 1; i < this.measuresTable.getColumnCount(); i++) {
                            ArrayList<Double> values = new ArrayList<>();
                            for (int k = 0; k < modelMatrix.getRowCount(); k++) {
                                values.add(Double.valueOf(modelMatrix.getValueAt(k, i).toString()));
                            }

                            TableCellRenderer renderer = new MatrixMeasuresCustomTableCellRenderer(this.selectedColor, Collections.max(values), Collections.min(values));
                            this.measuresTable.setDefaultRenderer(this.measuresTable.getColumnClass(i), renderer);

                        }

                    }

                    ((DefaultTableCellRenderer) measuresTable.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
                    measuresTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                    measuresScrollPane.setAutoscrolls(true);
                    measuresScrollPane.setEnabled(true);
                    measuresTable.setComponentPopupMenu(this.measuresCellPopupMenu);
                    measuresScrollPane.requestFocusInWindow();

                }
            } else {
                if (option == 3) {
                    if (selectedRowCol >= 0) {

                        if (this.selectedAttributes != null) {
                            final Object columnNames[] = new Object[this.selectedAttributes.size() + 1];
                            columnNames[0] = "";
                            for (int i = 0; i < this.selectedAttributes.size(); i++) {
                                columnNames[i + 1] = this.selectedAttributes.get(i);
                            }

                            DefaultTableModel bTableModel = (DefaultTableModel) this.measuresTable.getModel();
                            final Object tableData[][] = removeByCol(bTableModel, selectedRowCol);

                            int wCell = Math.round(this.measuresScrollPane.getWidth() / (columnNames.length));
                            int hCell = Math.round(this.measuresScrollPane.getHeight() / (columnNames.length));

                            if (hCell < 24) {
                                hCell = 24;
                            }
                            if (wCell < 100) {
                                wCell = 100;
                            }
                            DefaultTableModel tableModel = new DefaultTableModel(tableData, columnNames) {
                                private static final long serialVersionUID = 1L;

                                @Override
                                public boolean isCellEditable(int row, int column) {
                                    return false;
                                }

                            };
                            this.measuresTable.setModel(tableModel);
                            TableRowSorter rowSorter = new TableRowSorter(measuresTable.getModel());
                            for (int i = 1; i < this.measuresTable.getColumnCount(); i++) {
                                rowSorter.setComparator(i, new FloatComparator());
                            }
                            rowSorter.setComparator(0, new StringComparator());
//                measuresTable.setRowHeight(hCell);

                            measuresTable.setRowSorter(rowSorter);
                            measuresTable.createDefaultColumnsFromModel();
                            measuresTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                            measuresTable.setAutoscrolls(true);
                            measuresTable.setSelectionBackground(Color.getHSBColor(25, 25, 25));
                            measuresTable.setSelectionForeground(Color.RED);
                            measuresTable.setEnabled(true);

                            /*     measuresTable.getTableHeader().setComponentPopupMenu(measuresColPopupMenu);
                             measuresTable.getTableHeader().addMouseListener(new MouseAdapter() {
                             @Override
                             public void mouseClicked(MouseEvent e) {
                             measuresTable.clearSelection();
                             selectedMeasureCol = -1;
                             selectedMeasureRow = -1;
                             }

                             @Override
                             public void mouseReleased(MouseEvent e) {
                             if (SwingUtilities.isRightMouseButton(e)) {
                             int col = measuresTable.columnAtPoint(e.getPoint());
                             int row = -1;
                             selectedMeasureCol = col;
                             selectedMeasureRow = row;

                             }
                             measuresTable.clearSelection();
                             }
                             });
                             */
                            measuresTable.setRowSelectionAllowed(false);
                            measuresTable.setColumnSelectionAllowed(false);
                            measuresTable.setSelectionBackground(Color.getHSBColor(25, 25, 25));
                            measuresTable.setSelectionForeground(Color.RED);
                            measuresTable.addMouseListener(new MouseAdapter() {
                                @Override
                                public void mouseClicked(MouseEvent e) {
                                    int col = measuresTable.columnAtPoint(e.getPoint());
                                    int row = measuresTable.rowAtPoint(e.getPoint());
                                    selectedMeasureCol = col;
                                    selectedMeasureRow = row;
                                    if (col == 0) {
                                        selectedMeasureCol = -1;

                                    }
                                }

                                @Override
                                public void mouseReleased(MouseEvent e) {
                                    if (SwingUtilities.isRightMouseButton(e)) {
                                        int col = measuresTable.columnAtPoint(e.getPoint());
                                        int row = measuresTable.rowAtPoint(e.getPoint());
                                        selectedMeasureCol = col;
                                        selectedMeasureRow = row;
                                        if (col == 0) {
                                            selectedMeasureCol = -1;

                                        }

                                    }
                                }
                            });

                            if (this.selectedColor.equals("None")) {
                                TableCellRenderer renderer = new MatrixMeasuresWhiteCustomTableCellRenderer();
                                for (int i = 0; i < this.measuresTable.getColumnCount(); i++) {
                                    this.measuresTable.setDefaultRenderer(this.matrixTable.getColumnClass(i), renderer);
                                }
                                this.measuresTable.setCellSelectionEnabled(true);
                            } else {
                                TableModel modelMatrix = this.measuresTable.getModel();
                                for (int i = 1; i < this.measuresTable.getColumnCount(); i++) {
                                    ArrayList<Double> values = new ArrayList<>();
                                    for (int k = 0; k < modelMatrix.getRowCount(); k++) {
                                        values.add(Double.valueOf(modelMatrix.getValueAt(k, i).toString()));
                                    }

                                    TableCellRenderer renderer = new MatrixMeasuresCustomTableCellRenderer(this.selectedColor, Collections.max(values), Collections.min(values));
                                    this.measuresTable.setDefaultRenderer(this.measuresTable.getColumnClass(i), renderer);

                                }

                            }

                            ((DefaultTableCellRenderer) measuresTable.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
                            measuresTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                            measuresScrollPane.setAutoscrolls(true);
                            measuresScrollPane.setEnabled(true);
                            measuresTable.setComponentPopupMenu(this.measuresCellPopupMenu);
                            measuresScrollPane.requestFocusInWindow();

                        }
                    }
                }

            }
        }
        /**
         * to select which I can select
         *
         */
        /*     TableModel modelMatrix2 = this.measuresTable.getModel();
         for (int i = 1; i < this.measuresTable.getColumnCount(); i++) {
         System.out.println(i + ":");
         double value2 = 0.0;
         for (int k = 0; k < modelMatrix2.getRowCount(); k++) {
         value2 += Double.valueOf(modelMatrix2.getValueAt(k, i).toString());

         }

         System.out.println(value2 + ".");

         }*/
    }

    public void refreshTableData(DistanceMatrix distanceMatrix) {
        List<String> Ids = distanceMatrix.getIds();
        float cdata[] = distanceMatrix.getClassData();
        int elementCount = distanceMatrix.getElementCount();

        Object columnNames[] = new Object[elementCount + 3];
        columnNames[INDEX_COLUMN] = "Index";
        columnNames[ID_COLUMN] = "Id";
        columnNames[CLASS_COLUMN] = "Class";
        for (int i = 0; i < elementCount; i++) {
            columnNames[i + 3] = "Distance " + i;
        }

        float distanceValues[][] = new float[elementCount][elementCount];
        for (int i = 0; i < elementCount; i++) {
            for (int j = i + 1; j < elementCount; j++) {
                distanceValues[i][j] = distanceMatrix.getDistance(i, j);
                distanceValues[j][i] = distanceMatrix.getDistance(i, j);
            }
        }

        Object tableData[][] = new Object[elementCount][elementCount + 3];
        for (int i = 0; i < elementCount; i++) {
            for (int j = 0; j < elementCount + 3; j++) {
                switch (j) {
                    case 0:
                        tableData[i][0] = i;
                        break;
                    case 1:
                        tableData[i][1] = Ids.get(i);
                        break;
                    case 2:
                        tableData[i][2] = cdata[i];
                        if (!listClusters.contains(cdata[i])) {
                            listClusters.add(cdata[i]);
                        }
                        break;
                    default:
                        tableData[i][j] = distanceValues[i][j - 3];
                }
            }
        }
        TableModel tableModel = new DefaultTableModel(tableData, columnNames);
        TableCellRenderer renderer = new WhiteCustomTableCellRenderer();
        for (int i = 0; i < this.matrixTable.getColumnCount(); i++) {
            this.matrixTable.setDefaultRenderer(this.matrixTable.getColumnClass(i), renderer);
        }

        matrixTable.setModel(tableModel);
        TableRowSorter rowSorter = new TableRowSorter(matrixTable.getModel());
        for (int i = 0; i < this.matrixTable.getColumnCount(); i++) {
            rowSorter.setComparator(i, new FloatComparator());
        }
        matrixTable.setRowSorter(rowSorter);
        matrixTable.setCellSelectionEnabled(true);
        this.distanceMatrix = distanceMatrix;
    }

    public void refreshTableData(AbstractMatrix inputPointsMatrix) {

        AbstractMatrix currentPointsMatrix = inputPointsMatrix;
        if (selectedAttributes != null && selectedAttributes.size() > 0) {
            switch (typeMatrix) {
                case "data":
                    currentPointsMatrix = MatrixOperator.splitPointsMatrix((DenseMatrix) pointsMatrix, pointsMatrix.getIds(), selectedAttributes);
                    break;
                case "txt":
                    currentPointsMatrix = MatrixOperator.splitPointsMatrix((TxtMatrix) pointsMatrix, pointsMatrix.getIds(), selectedAttributes);
                    break;
            }
        }

        ArrayList<String> Ids = currentPointsMatrix.getIds();
        ArrayList<String> attributeList = MatrixOperator.getAttributes(currentPointsMatrix);

        float cdata[] = currentPointsMatrix.getClassData();
        int elementCount = currentPointsMatrix.getRowCount();
        int valuesCount = attributeList.size();

        Object columnNames[] = new Object[attributeList.size() + 3];
        columnNames[INDEX_COLUMN] = "Index";
        columnNames[ID_COLUMN] = "Id";
        columnNames[CLASS_COLUMN] = "Class";
        for (int i = 0; i < attributeList.size(); i++) {
            columnNames[i + 3] = attributeList.get(i);
        }

        float matrixValues[][] = new float[elementCount][valuesCount];
        for (int i = 0; i < elementCount; i++) {
            matrix.pointsmatrix.AbstractVector currentRow = currentPointsMatrix.getRow(i);
            for (int j = 0; j < attributeList.size(); j++) {
                matrixValues[i][j] = currentRow.getValue(j);
            }
        }
        listClusters = new ArrayList<>();

        Object tableData[][] = new Object[elementCount][valuesCount + 3];
        for (int i = 0; i < elementCount; i++) {
            for (int j = 0; j < valuesCount + 3; j++) {
                switch (j) {
                    case 0:
                        tableData[i][0] = i;
                        break;
                    case 1:
                        tableData[i][1] = Ids.get(i);
                        break;
                    case 2:
                        tableData[i][2] = cdata[i];
                        if (!listClusters.contains(cdata[i])) {
                            listClusters.add(cdata[i]);
                        }
                        break;
                    default:
                        tableData[i][j] = matrixValues[i][j - 3];
                }
            }

        }

        //DefaultTableModel tableModel = new DefaultTableModel(tableData, columnNames);
        TableModel tableModel = new DefaultTableModel(tableData, columnNames);

        TableCellRenderer renderer = new WhiteCustomTableCellRenderer();
        for (int i = 0; i < this.matrixTable.getColumnCount(); i++) {

            this.matrixTable.setDefaultRenderer(this.matrixTable.getColumnClass(i), renderer);
        }
        matrixTable.setModel(tableModel);
        TableRowSorter rowSorter = new TableRowSorter(matrixTable.getModel());
        for (int i = 0; i < this.matrixTable.getColumnCount(); i++) {
            rowSorter.setComparator(i, new FloatComparator());
        }
        matrixTable.setRowSorter(rowSorter);
        matrixTable.setCellSelectionEnabled(true);
        matrixTable.repaint();
        pointsMatrix = inputPointsMatrix;
        this.attributes = MatrixOperator.getAttributes(inputPointsMatrix);
        if (this.selectedAttributes == null) {
            this.selectedAttributes = this.attributes;
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            int progress = (Integer) evt.getNewValue();
            labelDataProgressBar.setIndeterminate(false);
            labelDataProgressBar.setValue(progress);

        }
    }

    class TaskLabelData extends SwingWorker<Void, Void> {
        /*
         * Main task. Executed in background thread.
         */

        @Override
        public Void doInBackground() throws IOException {

            try {
                int progress = 0;
                //Initialize progress property.
                setProgress(0);

                Class classSelected = Class.forName("classifications4." + s4ClassificationStr);
                int positionClass = 0;
                for (int i = 0; i < matrixTable.getColumnCount(); i++) {
                    String name = matrixTable.getColumnName(i);
                    if (name.equals("Class")) {
                        positionClass = i;
                        break;
                    }

                }
                S4Classification s4classification = (S4Classification) classSelected.newInstance();
                for (int i = 0; i < pointsMatrix.getRowCount(); i++) {
                    if (i % 5 == 0) {
                        setProgress(i * 100 / pointsMatrix.getRowCount());
                    }
                    float cKlass = s4classification.calculateLabel(pointsMatrix.getRow(i).getValue(s4Attribute));
                    pointsMatrix.getRow(i).setKlass(cKlass);
                    matrixTable.setValueAt(cKlass, i, positionClass);

                }
                setProgress(100);
                refreshTableData(pointsMatrix);
                return null;
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
                Logger.getLogger(VisualFeatureInspector.class.getName()).log(Level.SEVERE, null, ex);
            }
            return null;
        }

        /*
         * Executed in event dispatch thread
         */
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            labelDataButton.setEnabled(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualFeatureInspector.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new VisualFeatureInspector().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MenuButtonPanel;
    private javax.swing.JMenuItem PrintScreenMenuItem;
    private javax.swing.JLabel atributoToVisualizateLabel;
    private javax.swing.JLabel attrToNormLabel;
    private javax.swing.JList attrToNormList;
    private javax.swing.JPanel attrToNormPanel;
    private javax.swing.JList attributesTimeSeriesJList;
    private javax.swing.JLabel blockLabel;
    private javax.swing.JTextField blocksTextField;
    private javax.swing.JPanel buttonsFFSPanel;
    private javax.swing.JComboBox classifierComboBox;
    private javax.swing.JLabel classifierLabel;
    private javax.swing.JButton classifyButton;
    private javax.swing.JButton classifyButton1;
    private javax.swing.JMenuItem clearCacheMenuItem;
    private javax.swing.JButton cleverClusterButton;
    private javax.swing.JButton cleverHybridButton;
    private javax.swing.JButton cleverRankButton;
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JMenuItem colorOptionsMenuItem;
    private javax.swing.JButton createGraphProButton;
    private javax.swing.JPanel dataMiningPanel;
    private javax.swing.JPanel dataMiningPanel1;
    private javax.swing.JPanel decisionTreePanel;
    private javax.swing.JPanel decisionTreeVisualizerPanel;
    private javax.swing.JTextArea descriptionS4LabelDataTextArea;
    private javax.swing.JButton downloadNormalizeButton;
    private javax.swing.JButton drawHistogramButton;
    private javax.swing.JButton drawTimeSeriesButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exportDataMenuItem;
    private javax.swing.JMenuItem exportImageDecisionTreeMenu;
    private javax.swing.JMenuItem exportInvertedMatrixMenu;
    private javax.swing.JMenu exportMenu;
    private javax.swing.JMenuItem exportWekaFormatMenu;
    private javax.swing.JPanel ffsCenterPanel;
    private javax.swing.JTextField ffsKTextField;
    private javax.swing.JLabel ffsMethodLabel;
    private javax.swing.JList ffsOriginalVariablesList;
    private javax.swing.JList ffsResultVariablesList;
    private javax.swing.JTextField ffsThresholdTextField;
    private javax.swing.JPanel fieldsFFSNorthPanel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton filterUsedAttributesJ48Button;
    private javax.swing.JLabel fssKLabel;
    private javax.swing.JLabel fssKThresholdLabel;
    private javax.swing.JPanel fssMtsPanel;
    private javax.swing.JLabel gpsTimeLabel;
    private javax.swing.JPanel graphProPanel;
    private javax.swing.JScrollPane graphProScrollPane;
    private javax.swing.JLabel histogramImageLabel;
    private javax.swing.JMenuItem histogramImageMenuItem;
    private javax.swing.JPopupMenu histogramImagePopupMenu;
    private javax.swing.JLabel histogramLabel;
    private javax.swing.JComboBox idTimeFFSComboBox;
    private javax.swing.JLabel idTimeFFSLabel;
    private javax.swing.JButton infoDataSetButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton joinButton;
    private javax.swing.JButton labelDataButton;
    private javax.swing.JPanel labelDataPanel;
    private javax.swing.JProgressBar labelDataProgressBar;
    private javax.swing.JPanel labelLeftPanel;
    private javax.swing.JComboBox listAttributesLabelDataComboBox;
    private javax.swing.JComboBox listClassificationsLabelDataComboBox;
    private javax.swing.JScrollPane listMeasuresScrollPane;
    private javax.swing.JTable listMeasuresTable;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JScrollPane matrixScrollPane;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JMenuItem selectAttributesMenuItem;
    private javax.swing.JTable matrixTable;
    private javax.swing.JComboBox measureComboBox;
    private javax.swing.JComboBox measuresAttributesComboBox;
    private javax.swing.JPanel measuresPanel;
    private javax.swing.JPanel measuresPanel3;
    private javax.swing.JMenu measuresCellMenu;
    private javax.swing.JMenuItem measuresCellRowMenuItem;
    private javax.swing.JMenuItem measuresCellColMenuItem;
    private javax.swing.JPopupMenu measuresCellPopupMenu;
    //private javax.swing.JMenuItem measuresRowMenuItem;
    //private javax.swing.JPopupMenu measuresRowPopupMenu;
    //private javax.swing.JMenuItem measuresColMenuItem;
    //private javax.swing.JPopupMenu measuresColPopupMenu;
    private javax.swing.JMenuItem measuresListMenuItem;
    private javax.swing.JPopupMenu measuresListPopupMenu;
    private javax.swing.JScrollPane measuresScrollPane;
    private javax.swing.JTable measuresTable;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton normalizeButton;
    private javax.swing.JButton openButton;
    private javax.swing.JMenuItem openMenuItem;
    private java.awt.Label orderLabel;
    private javax.swing.JButton paintButton;
    private javax.swing.JButton pcDcpcCorrelationButton;
    private javax.swing.JButton pcDcpcCovarianceButton;
    private javax.swing.JButton pcaRankingButton;
    private javax.swing.JButton rankAttributeButton;
    private javax.swing.JButton refreshMatrixButton;
    private javax.swing.JButton removeColButton;
    private javax.swing.JButton removeRowButton;
    private javax.swing.JButton removeRowNANButton;
    private javax.swing.JTextArea resultClassifierTextArea;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton selectFSSFeaturesButton;
    private javax.swing.JLabel selectS4AttributeLabel;
    private javax.swing.JMenuItem setThreadsMenuItem;
    private javax.swing.JButton splitButton;
    private javax.swing.JComboBox timeOfWeekComboBox;
    private javax.swing.JLabel timeOfWeekLabel;
    private javax.swing.JMenuItem timeSeriesClassMenuItem;
    private javax.swing.JPopupMenu timeSeriesClassPopMenu;
    private javax.swing.JLabel timeSeriesClassLabel;
    private javax.swing.JMenuItem timeSeriesMenuItem;
    private javax.swing.JPopupMenu timeSeriesPopMenu;
    private javax.swing.JLabel timeSeriesLabel;
    private javax.swing.JPanel timeSeriesPanel;
    private javax.swing.JComboBox timeValTimeSeriesComboBox;
    private javax.swing.JLabel timeValTimeSeriesLabel;
    private javax.swing.JButton usedAttrJ48Button;
    private javax.swing.JLabel usedAttrJ48Label;
    private javax.swing.JList usedAttrJ48List;
    private javax.swing.JComboBox weekNumberAttributeTimeSeriesComboBox;
    private javax.swing.JLabel weekNumberLabel;
    // End of variables declaration//GEN-END:variables
}
